{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/AccountCard/AccountCard.component.html","webpack:///src/app/components/AccountCard/AccountCard.component.ts","webpack:///src/app/components/Sidebar/Sidebar.component.html","webpack:///src/app/components/Sidebar/Sidebar.component.ts","webpack:///src/app/models/Account.ts","webpack:///src/app/models/Customer.ts","webpack:///src/app/models/Transfer.ts","webpack:///src/app/pages/AccountDetailPage/AccountDetailPage.component.html","webpack:///src/app/pages/AccountDetailPage/AccountDetailPage.component.ts","webpack:///src/app/pages/AccountsPage/AccountsPage.component.html","webpack:///src/app/pages/AccountsPage/AccountsPage.component.ts","webpack:///src/app/pages/ErrorPage/ErrorPage.component.ts","webpack:///src/app/pages/ErrorPage/ErrorPage.component.html","webpack:///src/app/pages/LoginPage/LoginPage.component.ts","webpack:///src/app/pages/LoginPage/LoginPage.component.html","webpack:///src/app/pages/MainPage/MainPage.component.html","webpack:///src/app/pages/MainPage/MainPage.component.ts","webpack:///src/app/pages/RegisterPage/RegisterPage.component.ts","webpack:///src/app/pages/RegisterPage/RegisterPage.component.html","webpack:///src/app/pages/TransfersPage/TransfersPage.component.html","webpack:///src/app/pages/TransfersPage/TransfersPage.component.ts","webpack:///src/app/pipes/absoluteValue/absoluteValue.pipe.ts","webpack:///src/app/pipes/myCurrency/myCurrency.pipe.ts","webpack:///src/app/services/AccountService/AccountService.service.ts","webpack:///src/app/services/CurrencyConverter/CurrencyConverter.service.ts","webpack:///src/app/services/DexieService/BankApplicationDB.ts","webpack:///src/app/services/SessionService/SessionService.service.ts","webpack:///src/app/services/TransferService/TransferService.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","children","pathMatch","redirectTo","AppRoutingModule","forRoot","imports","routingComponent","AppComponent","router","session","translate","title","addLangs","setDefaultLang","use","getToken","navigateByUrl","language","selector","templateUrl","styleUrls","createTranslateLoader","http","AppModule","defaultLanguage","loader","provide","useFactory","deps","declarations","providers","bootstrap","AccountCardComponent","route","accountService","currencyService","getFirst","username","accounts","numberOfAccounts","accountNumber","response","uniqueKey","console","log","deleteAccount","navigate","SidebarComponent","modalService","content","open","ariaLabelledBy","centered","result","closeResult","logOut","openModal","changeLanguage","Account","Customer","Transfer","AccountDetailPageComponent","snapshot","params","account","accountSendTransfers","accountReceiveTransfers","AccountsPageComponent","formBuilder","newAccount","firstAccount","rate","now","Date","accountForm","group","accountName","required","amount","min","currency","otherAmount","value","invalid","alert","otherAccount","convertMoney","convertForAddAccount","updateAccount","Math","floor","random","addAccount","get","ErrorPageComponent","LoginPageComponent","customer","loginForm","password","login","onSubmit","MainPageComponent","sendTransfers","receiveTransfers","RegisterPageComponent","registerForm","minLength","register","TransfersPageComponent","transferSErvice","newTransfer","transferForm","cSendAccountNumber","cReceiveAccountNumber","description","transferType","addParamToURL","customerSendAccount","getParamFromURL","customerReceiveAccount","length","error","convertForAddTransfer","customerSendKey","customerReceiveKey","updateAccountByTransfer","addTransfer","customerName","queryParams","queryParamsHandling","subscribe","AbsoluteValuePipe","args","abs","name","MyCurrencyPipe","round","AccountService","date","put","window","location","reload","accountID","update","sendId","receiveId","amountSend","amountReceive","err","providedIn","getAccountName","where","equals","toArray","userAccounts","equalsIgnoreCase","reverse","userAnotherAccounts","notEqual","count","getAccountKey","primaryKeys","getAccount","and","getAccountAnotherUser","CurrencyConverterService","currencies","$","AltÄ±n","TL","oldAccountCurrency","newAccountCurrency","newAccountAmount","convertedMoney","BankApplicationDB","db","version","stores","customers","transfers","mapToClass","database","TOKEN_NAME","SessionService","localStorage","getItem","token","setItem","list","forEach","item","setToken","clear","TransferService","cSendName","cSendAccountName","cSendAccountAmount","cSendAccountCurrency","cReceiveName","cReceiveAccountName","cReceiveAccountAmount","userSendTransfers","userReceiveTransfers","transfer","userTransfersLimitTen","limit","userAccountSendTransfers","userAccountReceiveTransfers","environment","production"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { ErrorPageComponent } from './pages/ErrorPage/ErrorPage.component';\r\nimport { MainPageComponent } from './pages/MainPage/MainPage.component';\r\n// @angular\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n// components\r\nimport { LoginPageComponent } from './pages/LoginPage/LoginPage.component';\r\nimport { TransfersPageComponent } from './pages/TransfersPage/TransfersPage.component';\r\nimport { RegisterPageComponent } from './pages/RegisterPage/RegisterPage.component';\r\nimport { AccountsPageComponent } from './pages/AccountsPage/AccountsPage.component';\r\nimport { AccountDetailPageComponent } from './pages/AccountDetailPage/AccountDetailPage.component';\r\nimport { SidebarComponent } from './components/Sidebar/Sidebar.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: SidebarComponent,\r\n        children: [\r\n            { path: '', pathMatch: 'full', redirectTo: 'main' },\r\n            { path: 'main', component: MainPageComponent },\r\n            { path: 'accounts', component: AccountsPageComponent },\r\n            { path: 'transfers', component: TransfersPageComponent },\r\n            {\r\n                path: 'account/:accountNumber',\r\n                component: AccountDetailPageComponent,\r\n            },\r\n            { path: 'error', component: ErrorPageComponent },\r\n        ],\r\n    },\r\n    { path: 'login', component: LoginPageComponent },\r\n    { path: 'register', component: RegisterPageComponent },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes), TranslateModule],\r\n    exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n\r\nexport const routingComponent = [\r\n    SidebarComponent,\r\n    MainPageComponent,\r\n    AccountDetailPageComponent,\r\n    AccountsPageComponent,\r\n    LoginPageComponent,\r\n    RegisterPageComponent,\r\n    TransfersPageComponent,\r\n];\r\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { SessionService } from './services/SessionService/SessionService.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n    title = 'bank-application';\r\n    constructor(\r\n        private router: Router,\r\n        private session: SessionService,\r\n        public translate: TranslateService\r\n    ) {\r\n        translate.addLangs(['tr', 'en']);\r\n        // this language will be used as a fallback when a translation isn't found in the current language\r\n        translate.setDefaultLang('tr');\r\n\r\n        // the lang to use, if the lang isn't available, it will use the current loader to get them\r\n        translate.use('tr');\r\n        if (!session.getToken()) {\r\n            // EÄer giriÅ yapan kullanÄ±cÄ± yoksa Login sayfasÄ±na yÃ¶nlendirir.\r\n            this.router.navigateByUrl('/login');\r\n        }\r\n    }\r\n    changeLanguage(language: string) {\r\n        this.translate.use(language);\r\n    }\r\n}\r\n","<router-outlet></router-outlet>\r\n<app-Sidebar></app-Sidebar>\r\n","import { MyCurrencyPipe } from './pipes/myCurrency/myCurrency.pipe';\r\nimport { AbsoluteValuePipe } from './pipes/absoluteValue/absoluteValue.pipe';\r\nimport { AccountCardComponent } from './components/AccountCard/AccountCard.component';\r\nimport { SidebarComponent } from './components/Sidebar/Sidebar.component';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AppRoutingModule, routingComponent } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\r\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\n\r\n// AoT requires an exported function for factories\r\nexport function createTranslateLoader(http: HttpClient) {\r\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\r\n}\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        SidebarComponent,\r\n        AccountCardComponent,\r\n        AbsoluteValuePipe,\r\n        MyCurrencyPipe,\r\n        routingComponent,\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        AppRoutingModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        CommonModule,\r\n        NgbModule,\r\n        HttpClientModule,\r\n        TranslateModule.forRoot({\r\n            defaultLanguage: 'tr',\r\n            loader: {\r\n                provide: TranslateLoader,\r\n                useFactory: createTranslateLoader,\r\n                deps: [HttpClient],\r\n            },\r\n        }),\r\n    ],\r\n    providers: [],\r\n    bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","<div class=\"row card-group\" *ngIf=\"numberOfAccounts; else elseBlock\">\r\n    <div class=\"col-4\" *ngFor=\"let account of accounts\">\r\n        <div class=\"card\">\r\n            <div style=\"margin: 20px;\">\r\n                <h5 class=\"card-title\">\r\n                    {{ account.accountName }} ({{ account.currency }})\r\n                </h5>\r\n                <p class=\"card-text\">\r\n                    {{ \"account.accountName\" | translate }}\r\n                    {{ account.accountNumber }}\r\n                </p>\r\n                <p class=\"card-text\">\r\n                    {{ \"account.rate\" | translate }}: %{{ account.rate }}\r\n                </p>\r\n                <p class=\"card-text\">\r\n                    {{ \"account.amount\" | translate }}:\r\n                    {{ account.amount | myCurrency }}\r\n                </p>\r\n            </div>\r\n\r\n            <button\r\n                type=\"button\"\r\n                class=\"btn btn-danger\"\r\n                (click)=\"deleteAccount(account.accountNumber)\"\r\n                *ngIf=\"account.amount == 0\"\r\n            >\r\n                {{ \"account.deleteAccount\" | translate }}\r\n            </button>\r\n            <button\r\n                type=\"button\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"gotoDetails(account.accountNumber)\"\r\n            >\r\n                {{ \"account.details\" | translate }}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #elseBlock>\r\n    <h4>{{ \"account.noAccounts\" | translate }}</h4>\r\n</ng-template>\r\n","import { Account } from './../../models/Account';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SessionService } from 'src/app/services/SessionService/SessionService.service';\nimport {\n    AccountService,\n    userAccounts,\n    numberOfAccounts,\n    getAccountKey,\n} from 'src/app/services/AccountService/AccountService.service';\nimport { CurrencyConverterService } from 'src/app/services/CurrencyConverter/CurrencyConverter.service';\n\n@Component({\n    selector: 'app-AccountCard',\n    templateUrl: './AccountCard.component.html',\n    styleUrls: ['./AccountCard.component.css'],\n})\nexport class AccountCardComponent implements OnInit {\n    accounts: Account[]; // KullanÄ±cÄ±nÄ±n HesaplarÄ±\n    numberOfAccounts: number; // KullanÄ±cÄ±nÄ±n Hesap Adeti\n\n    username: string; // GiriÅ Yapan KullanÄ±cÄ±\n\n    closeResult: string;\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private session: SessionService,\n        private accountService: AccountService,\n        private currencyService: CurrencyConverterService\n    ) {\n        if (!session.getToken()) {\n            // EÄer giriÅ yapan kullanÄ±cÄ± yoksa Login sayfasÄ±na yÃ¶nlendirir.\n            this.router.navigateByUrl('/login');\n        } else {\n            this.getFirst(session.getToken());\n        }\n    }\n\n    async getFirst(username: string) {\n        this.username = this.session.getToken(); // Token'dan kullanÄ±cÄ± ismi alÄ±nÄ±p \"username\" deÄiÅkenine kaydedilir.\n        await userAccounts(username).then(\n            // KullanÄ±cÄ±nÄ±n hesaplarÄ± \"accounts\" deÄiÅkenine kaydedilir.\n            (resolve) => (this.accounts = resolve)\n        );\n        await numberOfAccounts(username).then(\n            // KullanÄ±cÄ±nÄ±n hesap adeti \"numberOfAccounts\" deÄiÅkenine kaydedilir.\n            (resolve) => (this.numberOfAccounts = resolve)\n        );\n    }\n    ngOnInit() {}\n\n    async deleteAccount(accountNumber: number) {\n        // Hesap Silme Fonksiyonu\n        let uniqueKey: number;\n        await getAccountKey(accountNumber).then((response) => {\n            // Ãncelikle hesabÄ±n primary key'i alÄ±nÄ±r.\n            uniqueKey = response[0];\n            console.log(response);\n        });\n        this.accountService.deleteAccount(uniqueKey); // AlÄ±nan primary key ile hesap silinir.\n    }\n\n    gotoDetails(accountNumber: any) {\n        // Detay SayfasÄ±na YÃ¶nlendirme Fonksiyonu\n        this.router.navigate(['/account/', accountNumber]);\n    }\n}\n","<div class=\"sidebar\">\r\n    <h3>{{ username }}</h3>\r\n    <hr />\r\n    <a routerLink=\"/main\" routerLinkActive=\"selected\">\r\n        {{ \"sidebar.main\" | translate }}\r\n    </a>\r\n    <hr />\r\n    <a routerLink=\"/accounts\" routerLinkActive=\"selected\">\r\n        {{ \"sidebar.accounts\" | translate }} ({{ numberOfAccounts }})\r\n    </a>\r\n    <hr />\r\n    <a routerLink=\"/transfers\" routerLinkActive=\"selected\">\r\n        {{ \"sidebar.transfers\" | translate }}\r\n    </a>\r\n    <hr />\r\n    <div class=\"btn-group\" role=\"group\">\r\n        <button class=\"btn btn-danger btn-lg\" (click)=\"openModal(logOutModal)\">\r\n            {{ \"sidebar.logout\" | translate }}\r\n        </button>\r\n    </div>\r\n\r\n    <hr />\r\n    <div class=\"btn-group\" role=\"group\">\r\n        <button\r\n            type=\"button\"\r\n            class=\"btn btn-secondary\"\r\n            (click)=\"changeLanguage('tr')\"\r\n        >\r\n            TÃRKÃE\r\n        </button>\r\n        <button\r\n            type=\"button\"\r\n            class=\"btn btn-secondary\"\r\n            (click)=\"changeLanguage('en')\"\r\n        >\r\n            ENGLISH\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #logOutModal let-modal>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\" id=\"modal-basic-title\">\r\n            {{ \"sidebar.modal.title\" | translate }}\r\n        </h4>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button class=\"btn btn-success btn-lg\" (click)=\"logOut()\">\r\n            {{ \"sidebar.modal.yes\" | translate }}\r\n        </button>\r\n        <button class=\"btn btn-danger btn-lg\" (click)=\"modal.close()\">\r\n            {{ \"sidebar.modal.no\" | translate }}\r\n        </button>\r\n    </div>\r\n</ng-template>\r\n\r\n<router-outlet></router-outlet>\r\n","import { TranslateService } from '@ngx-translate/core';\r\nimport { SessionService } from 'src/app/services/SessionService/SessionService.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    AccountService,\r\n    numberOfAccounts,\r\n    getAccount,\r\n} from 'src/app/services/AccountService/AccountService.service';\r\n\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'app-Sidebar',\r\n    templateUrl: './Sidebar.component.html',\r\n    styleUrls: ['./Sidebar.component.css'],\r\n})\r\nexport class SidebarComponent implements OnInit {\r\n    username: string; // GiriÅ Yapan KullanÄ±cÄ±\r\n    numberOfAccounts: number; // KullanÄ±cÄ±nÄ±n Hesap Adeti\r\n\r\n    closeResult: string;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private session: SessionService,\r\n        private accountService: AccountService,\r\n        private modalService: NgbModal,\r\n        private translate: TranslateService\r\n    ) {\r\n        if (!session.getToken()) {\r\n            // EÄer giriÅ yapan kullanÄ±cÄ± yoksa Login sayfasÄ±na yÃ¶nlendirilir.\r\n            this.router.navigateByUrl('/login');\r\n        } else {\r\n            this.getFirst(session.getToken());\r\n        }\r\n    }\r\n\r\n    async getFirst(username: string) {\r\n        this.username = this.session.getToken(); // Token'dan kullanÄ±cÄ± ismi alÄ±nÄ±p \"username\" deÄiÅkenine kaydedilir.\r\n        await numberOfAccounts(username).then(\r\n            // KullanÄ±cÄ±nÄ±n hesap adeti \"numberOfAccounts\" deÄiÅkenine kaydedilir.\r\n            (resolve) => (this.numberOfAccounts = resolve)\r\n        );\r\n    }\r\n\r\n    ngOnInit() {}\r\n\r\n    openModal(content: any) {\r\n        // Oturumu Kapat Modelini AÃ§ma Fonksiyonu\r\n        this.modalService\r\n            .open(content, {\r\n                ariaLabelledBy: 'modal-basic-title',\r\n                centered: true,\r\n            })\r\n            .result.then((result) => {\r\n                this.closeResult = `Closed with: ${result}`;\r\n            });\r\n    }\r\n\r\n    changeLanguage(language: string) {\r\n        this.translate.use(language);\r\n    }\r\n    logOut() {\r\n        // Oturumu Kapatma Fonksiyonu\r\n        this.session.logOut();\r\n    }\r\n}\r\n","export class Account {\n    customerName: string;\n    accountName: string;\n    accountNumber: number;\n    amount: number;\n    currency: string;\n    rate: number;\n    date: string;\n}\n","export class Customer {\n    username: string;\n    password: string;\n}\n","export class Transfer {\n    // One-to-Many Ä°liÅki KuramadÄ±ÄÄ±mdan transfer yapan customer bilgilerini de tutuyorum.\n    transferType: string;\n    cSendName: string;\n    cSendAccountName: string;\n    cSendAccountNumber: number;\n    cSendAccountAmount: number;\n    cSendAccountCurrency: string;\n    cReceiveName: string;\n    cReceiveAccountName: string;\n    cReceiveAccountNumber: number;\n    cReceiveAccountAmount: number;\n    amount: number;\n    description: string;\n    date: string;\n}\n","<app-Sidebar></app-Sidebar>\r\n<div class=\"main\">\r\n    <div class=\"container-sm\">\r\n        <h2>{{ \"account.accountDetail\" | translate }}</h2>\r\n        <hr />\r\n        <div class=\"row\">\r\n            <div class=\"col-3\">\r\n                <h5>\r\n                    {{ \"account.accountName\" | translate }}:\r\n                    <span>\r\n                        {{ account.accountName }} ({{ account.currency }})\r\n                    </span>\r\n                </h5>\r\n            </div>\r\n            <div class=\"col-3\">\r\n                <h5>\r\n                    {{ \"account.accountNumber\" | translate }}:\r\n                    <span>{{ account.accountNumber }}</span>\r\n                </h5>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <h5>\r\n                    {{ \"account.balance\" | translate }}:\r\n                    <span>{{ account.amount | myCurrency }}</span>\r\n                </h5>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <h5>\r\n                    {{ \"account.rate\" | translate }}:\r\n                    <span>%{{ account.rate }}</span>\r\n                </h5>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <h5 style=\"color: tomato;\">\r\n                    <span style=\"color: darkgrey;\">\r\n                        {{ \"account.date\" | translate }}:\r\n                    </span>\r\n                    {{ account.date }}\r\n                </h5>\r\n            </div>\r\n        </div>\r\n        <br />\r\n        <h3>{{ \"account.accountActions\" | translate }}</h3>\r\n        <table class=\"table table-bordered\">\r\n            <thead class=\"thead-dark\">\r\n                <tr>\r\n                    <th>{{ \"transfer.receiveAccountName\" | translate }}</th>\r\n                    <th>{{ \"account.amount\" | translate }}</th>\r\n                    <th>{{ \"transfer.description\" | translate }}</th>\r\n                    <th>{{ \"account.balance\" | translate }}</th>\r\n                    <th>{{ \"account.date\" | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr *ngFor=\"let transfer of accountSendTransfers\">\r\n                <td *ngIf=\"transfer.transferType === 'Havale'\">\r\n                    {{ transfer.cReceiveAccountName }}\r\n                </td>\r\n                <td *ngIf=\"transfer.transferType === 'Virman'\">\r\n                    {{ transfer.cReceiveAccountNumber }}\r\n                </td>\r\n                <td>\r\n                    {{ transfer.amount | myCurrency }}\r\n                    {{ transfer.cSendAccountCurrency }}\r\n                </td>\r\n                <td>{{ transfer.description }}</td>\r\n                <td>{{ transfer.cSendAccountAmount | myCurrency }}</td>\r\n                <td>{{ transfer.date }}</td>\r\n            </tr>\r\n            <tr *ngFor=\"let transfer of accountReceiveTransfers\">\r\n                <td *ngIf=\"transfer.transferType === 'Havale'\">\r\n                    {{ transfer.cReceiveAccountName }}\r\n                </td>\r\n                <td *ngIf=\"transfer.transferType === 'Virman'\">\r\n                    {{ transfer.cReceiveAccountNumber }}\r\n                </td>\r\n                <td>\r\n                    {{ transfer.amount | absoluteValue | myCurrency }}\r\n                    {{ transfer.cSendAccountCurrency }}\r\n                </td>\r\n                <td>{{ transfer.description }}</td>\r\n                <td>{{ transfer.cReceiveAccountAmount | myCurrency }}</td>\r\n                <td>{{ transfer.date }}</td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n</div>\r\n","import { AccountService } from './../../services/AccountService/AccountService.service';\nimport { Transfer } from './../../models/Transfer';\nimport {\n    userAccountSendTransfers,\n    userAccountReceiveTransfers,\n} from './../../services/TransferService/TransferService.service';\nimport { SessionService } from 'src/app/services/SessionService/SessionService.service';\nimport { getAccount } from 'src/app/services/AccountService/AccountService.service';\nimport { Account } from './../../models/Account';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-AccountDetailPage',\n    templateUrl: './AccountDetailPage.component.html',\n    styleUrls: ['./AccountDetailPage.component.css'],\n})\nexport class AccountDetailPageComponent implements OnInit {\n    account: Account; // Hesap Bilgisi\n    accountNumber: number; // Hesap NumarasÄ±\n    username: string; // GiriÅ Yapan KullanÄ±cÄ±\n\n    accountSendTransfers: Transfer[]; // GÃ¶nderilen Transferler\n    accountReceiveTransfers: Transfer[]; // AlÄ±nan Transferler\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private session: SessionService,\n        private accountService: AccountService\n    ) {\n        if (!session.getToken()) {\n            // EÄer giriÅ yapan kullanÄ±cÄ± yoksa Login sayfasÄ±na yÃ¶nlendirilir.\n            this.router.navigateByUrl('/login');\n        } else {\n            this.getFirst(session.getToken());\n        }\n    }\n    \n    async getFirst(username: string) {\n        this.username = this.session.getToken(); // Token'dan kullanÄ±cÄ± ismi alÄ±nÄ±p \"username\" deÄiÅkenine kaydedilir.\n        await getAccount(\n            // Hesap bilgisi url'den gelen accountNumber deÄeri ile \"account\" deÄiÅkenine kaydedilir.\n            username,\n            this.route.snapshot.params.accountNumber\n        ).then((resolve) => {\n            this.account = resolve[0];\n        });\n        await userAccountSendTransfers(\n            // KullanÄ±cÄ±nÄ±n gÃ¶nderdiÄi transferler \"accountSendTransfers\" deÄiÅkenine kaydedilir.\n            username,\n            this.route.snapshot.params.accountNumber\n        ).then((response) => {\n            this.accountSendTransfers = response;\n        });\n        await userAccountReceiveTransfers(\n            // KullanÄ±cÄ±nÄ±n aldÄ±ÄÄ± transferler \"accountReceiveTransfers\" deÄiÅkenine kaydedilir.\n            username,\n            this.route.snapshot.params.accountNumber\n        ).then((response) => {\n            this.accountReceiveTransfers = response;\n        });\n    }\n\n    ngOnInit() {}\n}\n","<div class=\"main\">\r\n    <div class=\"container-sm\">\r\n        <div class=\"row\">\r\n            <div class=\"col-10\">\r\n                <h2>\r\n                    {{ \"sidebar.accounts\" | translate }}\r\n                </h2>\r\n\r\n                <div\r\n                    class=\"row card-group\"\r\n                    *ngIf=\"numberOfAccounts; else elseBlock\"\r\n                >\r\n                    <table class=\"table table-bordered\">\r\n                        <thead class=\"thead-dark\">\r\n                            <tr>\r\n                                <th>{{ \"account.accountName\" | translate }}</th>\r\n                                <th>\r\n                                    {{ \"account.accountNumber\" | translate }}\r\n                                </th>\r\n                                <th>\r\n                                    {{ \"account.currency.title\" | translate }}\r\n                                </th>\r\n                                <th>{{ \"account.amount\" | translate }}</th>\r\n                                <th>{{ \"account.date\" | translate }}</th>\r\n                                <th>{{ \"account.action\" | translate }}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tr *ngFor=\"let account of accounts\">\r\n                            <td>{{ account.accountName }}</td>\r\n                            <td>{{ account.accountNumber }}</td>\r\n                            <td>{{ account.currency }}</td>\r\n                            <td>{{ account.amount | myCurrency }}</td>\r\n                            <td>{{ account.date }}</td>\r\n                            <td>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    class=\"btn btn-primary\"\r\n                                    (click)=\"gotoDetails(account.accountNumber)\"\r\n                                >\r\n                                    {{ \"account.details\" | translate }}\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                <ng-template #elseBlock>\r\n                    <h4>\r\n                        {{ \"account.noAccounts\" | translate }}\r\n                    </h4>\r\n                </ng-template>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <button\r\n                    class=\"btn btn-lg btn-primary\"\r\n                    (click)=\"open(addAccount)\"\r\n                >\r\n                    {{ \"account.modal.addAccount\" | translate }}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #addAccount let-modal>\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\" id=\"modal-basic-title\">\r\n                {{ \"account.modal.addAccount\" | translate }}\r\n            </h4>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <form [formGroup]=\"accountForm\" (ngSubmit)=\"onSubmit()\">\r\n                <label for=\"accountName\"\r\n                    >{{ \"account.accountName\" | translate }} *</label\r\n                >\r\n                <input\r\n                    type=\"text\"\r\n                    formControlName=\"accountName\"\r\n                    class=\"form-control\"\r\n                    required\r\n                />\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    *ngIf=\"\r\n                        accountName.errors &&\r\n                        (accountName.dirty || accountName.touched)\r\n                    \"\r\n                >\r\n                    <p *ngIf=\"accountName.errors.required\">\r\n                        {{\r\n                            \"account.modal.errors.accountNameRequired\"\r\n                                | translate\r\n                        }}\r\n                    </p>\r\n                </div>\r\n                <div\r\n                    class=\"form-group\"\r\n                    *ngIf=\"numberOfAccounts != 0; else elseblock\"\r\n                >\r\n                    <label for=\"amount\">\r\n                        {{ \"account.amount\" | translate }} *\r\n                    </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        formControlName=\"amount\"\r\n                        class=\"form-control\"\r\n                        min=\"1\"\r\n                    />\r\n                    <div\r\n                        class=\"alert alert-danger\"\r\n                        *ngIf=\"\r\n                            amount.errors && (amount.dirty || amount.touched)\r\n                        \"\r\n                    >\r\n                        <p *ngIf=\"amount.errors.required\">\r\n                            {{\r\n                                \"account.modal.errors.amountRequired\"\r\n                                    | translate\r\n                            }}\r\n                        </p>\r\n                        <p *ngIf=\"amount.errors.min\">\r\n                            {{ \"account.modal.errors.amountMin\" | translate }}\r\n                        </p>\r\n                    </div>\r\n                    <br />\r\n                    <label for=\"otherAmount\"\r\n                        >{{ \"account.withdrawAccount\" | translate }} *\r\n                    </label>\r\n                    <select\r\n                        class=\"custom-select custom-select-lg mb-3\"\r\n                        formControlName=\"otherAmount\"\r\n                    >\r\n                        <option\r\n                            *ngFor=\"let account of accounts\"\r\n                            value=\"{{ account.accountNumber }}\"\r\n                        >\r\n                            {{ \"account.accountNumber\" | translate }}\r\n                            {{ account.accountNumber }},\r\n                            {{ \"account.accountNumber\" | translate }}\r\n                            {{ account.amount }},\r\n                            {{ \"account.currency.title\" | translate }}\r\n                            {{ account.currency }}\r\n                        </option>\r\n                    </select>\r\n                    <div\r\n                        class=\"alert alert-danger\"\r\n                        *ngIf=\"\r\n                            otherAmount.errors &&\r\n                            (otherAmount.dirty || otherAmount.touched)\r\n                        \"\r\n                    >\r\n                        <p *ngIf=\"otherAmount.errors.required\">\r\n                            {{\r\n                                \"account.modal.errors.withdrawAccountRequired\"\r\n                                    | translate\r\n                            }}\r\n                        </p>\r\n                    </div>\r\n                    <div class=\"alert alert-info\">\r\n                        {{\r\n                            \"account.modal.errors.currencyConvertion\"\r\n                                | translate\r\n                        }}\r\n                    </div>\r\n                    <label for=\"currency\">\r\n                        {{ \"account.currency.title\" | translate }} *\r\n                    </label>\r\n                    <select\r\n                        class=\"custom-select custom-select-lg mb-3\"\r\n                        formControlName=\"currency\"\r\n                    >\r\n                        <option value=\"TL\">{{\r\n                            \"account.currency.turkishLira\" | translate\r\n                        }}</option>\r\n                        <option value=\"$\">{{\r\n                            \"account.currency.dolar\" | translate\r\n                        }}</option>\r\n                        <option value=\"â¬\">{{\r\n                            \"account.currency.euro\" | translate\r\n                        }}</option>\r\n                        <option value=\"AltÄ±n\">{{\r\n                            \"account.currency.gold\" | translate\r\n                        }}</option>\r\n                    </select>\r\n                    <div\r\n                        class=\"alert alert-danger\"\r\n                        *ngIf=\"\r\n                            currency.errors &&\r\n                            (currency.dirty || currency.touched)\r\n                        \"\r\n                    >\r\n                        <p *ngIf=\"currency.errors.required\">\r\n                            {{\r\n                                \"account.modal.errors.currencyRequired\"\r\n                                    | translate\r\n                            }}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <ng-template #elseblock>\r\n                    <label for=\"amount\">\r\n                        {{ \"account.amount\" | translate }}\r\n                    </label>\r\n                    <div class=\"alert alert-info\" role=\"alert\">\r\n                        {{ \"account.modal.errors.firstAccount\" | translate }}\r\n                    </div>\r\n                    <label for=\"amount\">\r\n                        {{ \"account.currency.title\" | translate }}\r\n                    </label>\r\n                    <div class=\"alert alert-info\" role=\"alert\">\r\n                        TL\r\n                    </div>\r\n                </ng-template>\r\n                <div class=\"form-group\">\r\n                    <button class=\"btn btn-primary btn-lg btn-block\">\r\n                        {{ \"account.modal.addAccount\" | translate }}\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </ng-template>\r\n</div>\r\n","import { CurrencyConverterService } from './../../services/CurrencyConverter/CurrencyConverter.service';\nimport { Account } from './../../models/Account';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SessionService } from 'src/app/services/SessionService/SessionService.service';\n\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { formatDate } from '@angular/common';\nimport {\n    getAccount,\n    userAccounts,\n    numberOfAccounts,\n    getAccountKey,\n    AccountService,\n} from '../../services/AccountService/AccountService.service';\n\n@Component({\n    selector: 'app-AccountsPage',\n    templateUrl: './AccountsPage.component.html',\n    styleUrls: ['./AccountsPage.component.css'],\n})\nexport class AccountsPageComponent implements OnInit {\n    accountForm: FormGroup; // Hesap Ekleme Formu\n\n    accounts: Account[]; // KullanÄ±cÄ±n HesaplarÄ±\n    numberOfAccounts: number; // KullanÄ±cÄ±nÄ±n Hesap Adeti\n    newAccount = new Account(); // AÃ§Ä±lacak Yeni Hesap\n    firstAccount: boolean = false; // AÃ§Ä±lacak HesabÄ±n Ä°lk Hesap Olup OlmadÄ±ÄÄ±nÄ± Tutan DeÄiÅken\n    otherAccount: Account; // AÃ§Ä±lan Hesaba Para Aktaracak DiÄer Hesap\n\n    username: string; // GiriÅ Yapan KullanÄ±cÄ±\n    rate: number = 15; // Sabit Faiz OranÄ±\n\n    closeResult: string;\n    now = formatDate(new Date(), 'dd/MM/yyyy', 'en'); // KayÄ±t Tarihi Ä°Ã§in Tutulan DeÄiÅken\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private session: SessionService,\n        private accountService: AccountService,\n        private currencyService: CurrencyConverterService,\n        private modalService: NgbModal\n    ) {\n        if (!session.getToken()) {\n            // EÄer giriÅ yapan kullanÄ±cÄ± yoksa Login sayfasÄ±na yÃ¶nlendirir.\n            this.router.navigateByUrl('/login');\n        } else {\n            this.getFirst(session.getToken());\n        }\n    }\n\n    async getFirst(username: string) {\n        this.username = this.session.getToken(); // Token'dan kullanÄ±cÄ± ismi alÄ±nÄ±p \"username\" deÄiÅkenine kaydedilir.\n        await userAccounts(username).then(\n            // KullanÄ±cÄ±nÄ±n hesaplarÄ± \"accounts\" deÄiÅkenine kaydedilir.\n            (resolve) => (this.accounts = resolve)\n        );\n        await numberOfAccounts(username).then(\n            // KullanÄ±cÄ±nÄ±n hesap adeti \"numberOfAccounts\" deÄiÅkenine kaydedilir.\n            (resolve) => (this.numberOfAccounts = resolve)\n        );\n    }\n\n    ngOnInit() {\n        this.accountForm = this.formBuilder.group({\n            // Form Ä°le Ä°lgili ValidasyonlarÄ± Belirleme\n            accountName: ['', Validators.required],\n            amount: ['10000', [Validators.required, Validators.min(1)]],\n            currency: ['TL', Validators.required],\n            otherAmount: [[]],\n        });\n    }\n\n    /** Validasyon iÃ§in form deÄerlerine ulaÅmayÄ± saÄlayan get metodlarÄ± */\n    get accountName() {\n        return this.accountForm.get('accountName');\n    }\n    get amount() {\n        return this.accountForm.get('amount');\n    }\n    get currency() {\n        return this.accountForm.get('currency');\n    }\n    get otherAmount() {\n        return this.accountForm.get('otherAmount');\n    }\n\n    open(content: any) {\n        // Hesap Ekleme Modal'Ä±nÄ± AÃ§ma Fonksiyonu\n        this.modalService\n            .open(content, { ariaLabelledBy: 'modal-basic-title' })\n            .result.then((result) => {\n                this.closeResult = `Closed with: ${result}`;\n            });\n    }\n\n    async onSubmit() {\n        // Hesap Ekleme Fonksiyonu\n        this.newAccount = this.accountForm.value;\n\n        // Form'da validasyon hatasÄ± varsa geri dÃ¶ner.\n        if (this.accountForm.invalid) {\n            alert('Zorunlu AlanlarÄ± Doldurun!');\n            return;\n        }\n        if (this.numberOfAccounts !== 0) {\n            // KullanÄ±cÄ±nÄ±n ilk hesabÄ± aÃ§Ä±p aÃ§madÄ±ÄÄ±nÄ± kontrol etme\n            await getAccount(this.username, this.otherAmount.value).then(\n                // Hesaba yÃ¼klenecek paranÄ±n Ã§ekileceÄi hesap bilgisi\n                (response) => {\n                    this.otherAccount = response[0];\n                }\n            );\n\n            let convertMoney: number = this.currencyService.convertForAddAccount(\n                // DÃ¶viz Kuru'na gÃ¶re para dÃ¶nÃ¼ÅtÃ¼rme iÅlemleri\n                this.otherAccount.currency,\n                this.newAccount.currency,\n                this.newAccount.amount\n            );\n\n            if (convertMoney > this.otherAccount.amount) {\n                // DÃ¶nÃ¼ÅtÃ¼rÃ¼len para Ã§ekilecek hesaptaki paradan fazla ise\n                alert('ParanÄ±n ÃekileceÄi HesabÄ±nÄ±zda Yeterli Bakiye Yok!');\n                return;\n            } else {\n                // Yeterli bakiye varsa\n                let uniqueKey: number;\n                await getAccountKey(this.otherAccount.accountNumber).then(\n                    (response) => {\n                        uniqueKey = response[0];\n                    }\n                );\n\n                this.accountService.updateAccount(\n                    // DiÄer hesaptan yatÄ±rÄ±lacak para miktarÄ± dÃ¼ÅÃ¼lÃ¼r.\n                    uniqueKey,\n                    this.otherAccount.amount - convertMoney\n                );\n            }\n        }\n\n        let accountNumber = Math.floor(\n            // Rastgele bir hesap numarasÄ±\n            Math.random() * (999999 - 100000 + 1) + 100000\n        );\n\n        this.accountService.addAccount(\n            // Hesap veritabanÄ±na eklenir.\n            this.username,\n            this.newAccount.accountName,\n            accountNumber,\n            this.newAccount.amount,\n            this.newAccount.currency,\n            this.rate,\n            this.now\n        );\n    }\n\n    gotoDetails(accountNumber: any) {\n        // Detay SayfasÄ±na YÃ¶nlendirme Fonksiyonu\n        this.router.navigate(['/account/', accountNumber]);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-ErrorPage',\r\n  templateUrl: './ErrorPage.component.html',\r\n  styleUrls: ['./ErrorPage.component.css']\r\n})\r\nexport class ErrorPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<div class=\"main\">\r\n<div class=\"container\">\r\n    <div class=\"row\">\r\n        <img class=\"mx-auto d-block\" src=\"../../../assets/img/404.jpg\" />\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"mx-auto d-block\">\r\n            <a class=\"btn btn-primary\" href=\"/main\" role=\"button\">\r\n                GO TO HOME PAGE\r\n            </a>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { SessionService } from './../../services/SessionService/SessionService.service';\r\nimport { Customer } from './../../models/Customer';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-LoginPage',\r\n    templateUrl: './LoginPage.component.html',\r\n    styleUrls: ['./LoginPage.component.css'],\r\n})\r\nexport class LoginPageComponent implements OnInit {\r\n    loginForm: FormGroup; // KullanÄ±cÄ± GiriÅ Formu\r\n    customer = new Customer(); // Form Ä°Ã§in KullanÄ±cÄ± Objesi\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private session: SessionService\r\n    ) {\r\n        if (session.getToken()) {\r\n            // EÄer giriÅ yapan kullanÄ±cÄ± yoksa Login sayfasÄ±na yÃ¶nlendirir.\r\n            this.router.navigateByUrl('/main');\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.loginForm = this.formBuilder.group({\r\n            // Form Ä°le Ä°lgili ValidasyonlarÄ± Belirleme\r\n            username: ['', Validators.required],\r\n            password: ['', Validators.required],\r\n        });\r\n    }\r\n\r\n    /** Validasyon iÃ§in form deÄerlerine ulaÅmayÄ± saÄlayan get metodlarÄ± */\r\n    get username() {\r\n        return this.loginForm.get('username');\r\n    }\r\n    get password() {\r\n        return this.loginForm.get('password');\r\n    }\r\n\r\n    onSubmit() {\r\n        // Oturum AÃ§ma Fonkiyonu\r\n        this.customer = this.loginForm.value;\r\n\r\n        // EÄer form'da herhangi bir validasyon hatasÄ± Ã§Ä±karsa iÅlem yapÄ±lmaz!\r\n        if (this.loginForm.invalid) {\r\n            alert('Zorunlu AlanlarÄ± Doldurun!');\r\n            return;\r\n        }\r\n\r\n        this.session.login(this.customer.username, this.customer.password);\r\n    }\r\n}\r\n","<div class=\"container-sm\">\r\n    <div class=\"login-container\">\r\n        <h2>{{ \"login.login\" | translate }}</h2>\r\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n            <label for=\"username\">{{ \"login.username\" | translate }}</label>\r\n            <input\r\n                type=\"text\"\r\n                formControlName=\"username\"\r\n                class=\"form-control\"\r\n                required\r\n            />\r\n            <div\r\n                class=\"alert alert-danger\"\r\n                *ngIf=\"username.errors && (username.dirty || username.touched)\"\r\n            >\r\n                <p *ngIf=\"username.errors.required\">\r\n                    {{ \"login.errors.usernameRequired\" | translate }}\r\n                </p>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"password\">{{ \"login.password\" | translate }}</label>\r\n                <input\r\n                    type=\"password\"\r\n                    formControlName=\"password\"\r\n                    class=\"form-control\"\r\n                    required\r\n                />\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    *ngIf=\"\r\n                        password.errors && (password.dirty || password.touched)\r\n                    \"\r\n                >\r\n                    <p *ngIf=\"password.errors.required\">\r\n                        {{ \"login.errors.passwordRequired\" | translate }}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <button class=\"btn btn-primary btn-lg btn-block\">\r\n                    {{ \"login.login\" | translate }}\r\n                </button>\r\n                <a routerLink=\"/register\" class=\"btn btn-link btn-lg btn-block\">\r\n                    {{ \"login.register\" | translate }}\r\n                </a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n","<div class=\"main\">\r\n    <div class=\"container-sm\">\r\n        <div class=\"row\">\r\n            <div class=\"col-10\">\r\n                <h2>{{ \"sidebar.accounts\" | translate }}</h2>\r\n                <hr />\r\n                <app-AccountCard></app-AccountCard>\r\n                <hr />\r\n                <h2>{{ \"transfer.lastActivities\" | translate }}</h2>\r\n                <hr />\r\n                <div\r\n                    *ngIf=\"\r\n                        sendTransfers.length !== 0 ||\r\n                            receiveTransfers.length !== 0;\r\n                        else noTransfer\r\n                    \"\r\n                >\r\n                    <table class=\"table table-bordered\">\r\n                        <thead class=\"thead-dark\">\r\n                            <tr>\r\n                                <th>\r\n                                    {{\r\n                                        \"transfer.sendAccountNumber\" | translate\r\n                                    }}\r\n                                </th>\r\n                                <th>\r\n                                    {{\r\n                                        \"transfer.receiveAccountNumber\"\r\n                                            | translate\r\n                                    }}\r\n                                </th>\r\n                                <th>{{ \"account.amount\" | translate }}</th>\r\n                                <th>\r\n                                    {{ \"transfer.description\" | translate }}\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tr *ngFor=\"let transfer of sendTransfers\">\r\n                            <td>{{ transfer.cSendAccountNumber }}</td>\r\n                            <td>{{ transfer.cReceiveAccountNumber }}</td>\r\n                            <td>\r\n                                {{ transfer.amount | myCurrency }}\r\n                                {{ transfer.cSendAccountCurrency }}\r\n                            </td>\r\n                            <td>{{ transfer.description }}</td>\r\n                        </tr>\r\n                        <tr *ngFor=\"let transfer of receiveTransfers\">\r\n                            <td>{{ transfer.cSendAccountNumber }}</td>\r\n                            <td>{{ transfer.cReceiveAccountNumber }}</td>\r\n                            <td>\r\n                                {{\r\n                                    transfer.amount | absoluteValue | myCurrency\r\n                                }}\r\n                                {{ transfer.cSendAccountCurrency }}\r\n                            </td>\r\n                            <td>{{ transfer.description }}</td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                <ng-template #noTransfer>\r\n                    <h4>{{ \"transfer.noActivities\" | translate }}</h4>\r\n                </ng-template>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <h2>{{ \"exchangeRate\" | translate }}</h2>\r\n                <h5>{{ \"account.currency.dolar\" | translate }}: 6 TL</h5>\r\n                <h5>{{ \"account.currency.euro\" | translate }}: 7 TL</h5>\r\n                <h5>{{ \"account.currency.gold\" | translate }}: 390 TL</h5>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Transfer } from './../../models/Transfer';\nimport { SessionService } from 'src/app/services/SessionService/SessionService.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CurrencyConverterService } from 'src/app/services/CurrencyConverter/CurrencyConverter.service';\nimport {\n    userSendTransfers,\n    userReceiveTransfers,\n} from 'src/app/services/TransferService/TransferService.service';\n\n@Component({\n    selector: 'app-MainPage',\n    templateUrl: './MainPage.component.html',\n    styleUrls: ['./MainPage.component.css'],\n})\nexport class MainPageComponent implements OnInit {\n    username: string; // GiriÅ Yapan KullanÄ±cÄ±\n    sendTransfers: Transfer[]; // GÃ¶nderilen Transferler\n    receiveTransfers: Transfer[]; // AlÄ±nan Transferler\n\n    constructor(private router: Router, private session: SessionService) {\n        if (!session.getToken()) {\n            // EÄer giriÅ yapan kullanÄ±cÄ± yoksa Login sayfasÄ±na yÃ¶nlendirir.\n            this.router.navigateByUrl('/login');\n        } else {\n            this.getFirst(session.getToken());\n        }\n    }\n\n    async getFirst(username: string) {\n        this.username = this.session.getToken(); // Token'dan kullanÄ±cÄ± ismi alÄ±nÄ±p \"username\" deÄiÅkenine kaydedilir.\n        await userSendTransfers(username).then(\n            // KullanÄ±cÄ±nÄ±n gÃ¶nderdiÄi transferler \"accountSendTransfers\" deÄiÅkenine kaydedilir.\n            (resolve) => (this.sendTransfers = resolve)\n        );\n        await userReceiveTransfers(username).then(\n            // KullanÄ±cÄ±nÄ±n aldÄ±ÄÄ± transferler \"accountReceiveTransfers\" deÄiÅkenine kaydedilir.\n            (resolve) => (this.receiveTransfers = resolve)\n        );\n    }\n\n    ngOnInit() {}\n}\n","import { Customer } from './../../models/Customer';\nimport { SessionService } from './../../services/SessionService/SessionService.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'app-RegisterPage',\n    templateUrl: './RegisterPage.component.html',\n    styleUrls: ['./RegisterPage.component.css'],\n})\nexport class RegisterPageComponent implements OnInit {\n    registerForm: FormGroup; // KullanÄ±cÄ± KayÄ±t Formu\n    customer = new Customer(); // Form Ä°Ã§in KullanÄ±cÄ± Objesi\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private session: SessionService\n    ) {\n        if (session.getToken()) {\n            // EÄer giriÅ yapan kullanÄ±cÄ± yoksa Login sayfasÄ±na yÃ¶nlendirir.\n            this.router.navigateByUrl('/main');\n        }\n    }\n\n    ngOnInit() {\n        this.registerForm = this.formBuilder.group({\n            // Form Ä°le Ä°lgili ValidasyonlarÄ± Belirleme\n            username: ['', Validators.required],\n            password: ['', [Validators.required, Validators.minLength(6)]],\n        });\n    }\n\n    /** Validasyon iÃ§in form deÄerlerine ulaÅmayÄ± saÄlayan get metodlarÄ± */\n    get username() {\n        return this.registerForm.get('username');\n    }\n    get password() {\n        return this.registerForm.get('password');\n    }\n\n    onSubmit() {\n        // KullanÄ±cÄ± KaydÄ± Fonksiyonu\n        this.customer = this.registerForm.value;\n\n        // EÄer form'da herhangi bir validasyon hatasÄ± Ã§Ä±karsa iÅlem yapÄ±lmaz!\n        if (this.registerForm.invalid) {\n            alert('Zorunlu AlanlarÄ± Doldurun!');\n            return;\n        }\n\n        this.session.register(this.customer.username, this.customer.password);\n    }\n}\n","<div class=\"container-sm\">\r\n    <div class=\"login-container\">\r\n        <h2>{{ \"login.register\" | translate }}</h2>\r\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n            <label for=\"username\">{{ \"login.username\" | translate }}</label>\r\n            <input\r\n                type=\"text\"\r\n                formControlName=\"username\"\r\n                class=\"form-control\"\r\n                required\r\n            />\r\n            <div\r\n                class=\"alert alert-danger\"\r\n                *ngIf=\"username.errors && (username.dirty || username.touched)\"\r\n            >\r\n                <p *ngIf=\"username.errors.required\">\r\n                    {{ \"login.errors.usernameRequired\" | translate }}\r\n                </p>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"password\">{{ \"login.password\" | translate }}</label>\r\n                <input\r\n                    type=\"password\"\r\n                    formControlName=\"password\"\r\n                    class=\"form-control\"\r\n                    required\r\n                    minlength=\"6\"\r\n                />\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    *ngIf=\"\r\n                        password.errors && (password.dirty || password.touched)\r\n                    \"\r\n                >\r\n                    <p *ngIf=\"password.errors.required\">\r\n                        {{ \"login.errors.passwordRequired\" | translate }}\r\n                    </p>\r\n                    <p *ngIf=\"password.errors.minlength\">\r\n                        {{ \"login.errors.passwordMin\" | translate }}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <button class=\"btn btn-primary btn-lg btn-block\">\r\n                    {{ \"login.register\" | translate }}\r\n                </button>\r\n                <a routerLink=\"/login\" class=\"btn btn-link btn-lg btn-block\">\r\n                    {{ \"login.login\" | translate }}\r\n                </a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n","<div class=\"main\">\r\n    <div class=\"container-sm\">\r\n        <div class=\"row\">\r\n            <div class=\"col-10\">\r\n                <h2>{{ \"sidebar.transfers\" | translate }}</h2>\r\n                <div\r\n                    *ngIf=\"\r\n                        sendTransfers.length !== 0 ||\r\n                            receiveTransfers.length !== 0;\r\n                        else noTransfer\r\n                    \"\r\n                >\r\n                    <table class=\"table table-bordered\">\r\n                        <thead class=\"thead-dark\">\r\n                            <tr>\r\n                                <th>\r\n                                    {{ \"transfer.sendAccountName\" | translate }}\r\n                                </th>\r\n                                <th>\r\n                                    {{\r\n                                        \"transfer.sendAccountNumber\" | translate\r\n                                    }}\r\n                                </th>\r\n                                <th>\r\n                                    {{\r\n                                        \"transfer.receiveAccountNumber\"\r\n                                            | translate\r\n                                    }}\r\n                                </th>\r\n                                <th>\r\n                                    {{ \"account.currency.title\" | translate }}\r\n                                </th>\r\n                                <th>{{ \"account.amount\" | translate }}</th>\r\n                                <th>\r\n                                    {{ \"transfer.description\" | translate }}\r\n                                </th>\r\n                                <th>{{ \"account.date\" | translate }}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tr *ngFor=\"let transfer of sendTransfers\">\r\n                            <td>{{ transfer.cSendAccountName }}</td>\r\n                            <td>{{ transfer.cSendAccountNumber }}</td>\r\n                            <td>{{ transfer.cReceiveAccountNumber }}</td>\r\n                            <td>{{ transfer.cSendAccountCurrency }}</td>\r\n                            <td>{{ transfer.amount | myCurrency }}</td>\r\n                            <td>{{ transfer.description }}</td>\r\n                            <td>{{ transfer.date }}</td>\r\n                        </tr>\r\n                        <tr *ngFor=\"let transfer of receiveTransfers\">\r\n                            <td>{{ transfer.cSendAccountName }}</td>\r\n                            <td>{{ transfer.cSendAccountNumber }}</td>\r\n                            <td>{{ transfer.cReceiveAccountNumber }}</td>\r\n                            <td>{{ transfer.cSendAccountCurrency }}</td>\r\n                            <td>\r\n                                {{\r\n                                    transfer.amount | absoluteValue | myCurrency\r\n                                }}\r\n                            </td>\r\n                            <td>{{ transfer.description }}</td>\r\n                            <td>{{ transfer.date }}</td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                <ng-template #noTransfer>\r\n                    <h4>\r\n                        {{ \"transfer.noTransfers\" | translate }}\r\n                    </h4>\r\n                </ng-template>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <button\r\n                    class=\"btn btn-lg btn-primary\"\r\n                    (click)=\"open(addTransfer, 'Virman')\"\r\n                >\r\n                    {{ \"transfer.modal.virman\" | translate }}\r\n                </button>\r\n                <hr />\r\n                <button\r\n                    class=\"btn btn-lg btn-primary\"\r\n                    (click)=\"open(addTransfer, 'Havale')\"\r\n                >\r\n                    {{ \"transfer.modal.havale\" | translate }}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #addTransfer let-modal>\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\" id=\"modal-basic-title\">\r\n                {{ getParamFromURL() | translate }}\r\n            </h4>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <form [formGroup]=\"transferForm\" (ngSubmit)=\"onSubmit()\">\r\n                <label for=\"cSendAccountNumber\">\r\n                    {{ \"transfer.sendAccountNumber\" | translate }} *\r\n                </label>\r\n                <select\r\n                    class=\"custom-select custom-select-lg mb-3\"\r\n                    formControlName=\"cSendAccountNumber\"\r\n                >\r\n                    <option\r\n                        *ngFor=\"let account of accounts\"\r\n                        value=\"{{ account.accountNumber }}\"\r\n                    >\r\n                        {{ \"account.accountNumber\" | translate }}\r\n                        {{ account.accountNumber }},\r\n                        {{ \"account.accountNumber\" | translate }}\r\n                        {{ account.amount }},\r\n                        {{ \"account.currency.title\" | translate }}\r\n                        {{ account.currency }}\r\n                    </option>\r\n                </select>\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    *ngIf=\"\r\n                        cSendAccountNumber.errors &&\r\n                        (cSendAccountNumber.dirty || cSendAccountNumber.touched)\r\n                    \"\r\n                >\r\n                    <p *ngIf=\"cSendAccountNumber.errors.required\">\r\n                        {{ \"transfer.modal.errors.sendRequired\" | translate }}\r\n                    </p>\r\n                </div>\r\n                <div class=\"alert alert-info\">\r\n                    {{ \"account.modal.errors.currencyConvertion\" | translate }}\r\n                </div>\r\n                <label for=\"cReceiveAccountNumber\">\r\n                    {{ \"transfer.receiveAccountNumber\" | translate }} *\r\n                </label>\r\n                <div *ngIf=\"getParamFromURL() === 'Virman'; else havaleBlock\">\r\n                    <select\r\n                        class=\"custom-select custom-select-lg mb-3\"\r\n                        formControlName=\"cReceiveAccountNumber\"\r\n                    >\r\n                        <option\r\n                            *ngFor=\"let account of accounts\"\r\n                            value=\"{{ account.accountNumber }}\"\r\n                        >\r\n                            {{ \"account.accountNumber\" | translate }}\r\n                            {{ account.accountNumber }},\r\n                            {{ \"account.accountNumber\" | translate }}\r\n                            {{ account.amount }},\r\n                            {{ \"account.currency.title\" | translate }}\r\n                            {{ account.currency }}\r\n                        </option>\r\n                    </select>\r\n                </div>\r\n                <ng-template #havaleBlock>\r\n                    <input\r\n                        type=\"number\"\r\n                        formControlName=\"cReceiveAccountNumber\"\r\n                        class=\"form-control\"\r\n                        required\r\n                    />\r\n                    <div\r\n                        class=\"alert alert-danger\"\r\n                        *ngIf=\"\r\n                            cReceiveAccountNumber.errors &&\r\n                            (cReceiveAccountNumber.dirty ||\r\n                                cReceiveAccountNumber.touched)\r\n                        \"\r\n                    >\r\n                        <p *ngIf=\"cReceiveAccountNumber.errors.required\">\r\n                            {{\r\n                                \"transfer.modal.errors.receiveRequired\"\r\n                                    | translate\r\n                            }}\r\n                        </p>\r\n                        <p *ngIf=\"cReceiveAccountNumber.errors.min\">\r\n                            {{ \"transfer.modal.errors.numberMin\" | translate }}\r\n                        </p>\r\n                    </div></ng-template\r\n                >\r\n                <label for=\"amount\">{{ \"account.amount\" | translate }} *</label>\r\n                <input\r\n                    type=\"number\"\r\n                    formControlName=\"amount\"\r\n                    class=\"form-control\"\r\n                    min=\"1\"\r\n                />\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    *ngIf=\"amount.errors && (amount.dirty || amount.touched)\"\r\n                >\r\n                    <p *ngIf=\"amount.errors.required\">\r\n                        {{ \"account.modal.errors.amountRequired\" | translate }}\r\n                    </p>\r\n                    <p *ngIf=\"amount.errors.min\">\r\n                        {{ \"account.modal.errors.amountMin\" | translate }}\r\n                    </p>\r\n                </div>\r\n                <label for=\"description\">\r\n                    {{ \"transfer.description\" | translate }} *\r\n                </label>\r\n                <input\r\n                    type=\"text\"\r\n                    formControlName=\"description\"\r\n                    class=\"form-control\"\r\n                />\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    *ngIf=\"\r\n                        description.errors &&\r\n                        (description.dirty || description.touched)\r\n                    \"\r\n                >\r\n                    <p *ngIf=\"description.errors.required\">\r\n                        {{\r\n                            \"transfer.modal.errors.descriptionRequired\"\r\n                                | translate\r\n                        }}\r\n                    </p>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <button class=\"btn btn-primary btn-lg btn-block\">\r\n                        {{ \"transfer.modal.add\" | translate }}\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </ng-template>\r\n</div>\r\n","import {\n    getAccount,\n    getAccountKey,\n    AccountService,\n    userAccounts,\n    getAccountAnotherUser,\n} from 'src/app/services/AccountService/AccountService.service';\nimport { CurrencyConverterService } from './../../services/CurrencyConverter/CurrencyConverter.service';\nimport { Account } from './../../models/Account';\nimport {\n    TransferService,\n    userSendTransfers,\n    userReceiveTransfers,\n} from './../../services/TransferService/TransferService.service';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { Transfer } from './../../models/Transfer';\nimport { Component, OnInit } from '@angular/core';\nimport { SessionService } from 'src/app/services/SessionService/SessionService.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { formatDate } from '@angular/common';\n\n@Component({\n    selector: 'app-TransfersPage',\n    templateUrl: './TransfersPage.component.html',\n    styleUrls: ['./TransfersPage.component.css'],\n})\nexport class TransfersPageComponent implements OnInit {\n    transferForm: FormGroup; // Transfer Ekleme Formu\n\n    sendTransfers: Transfer[]; // GÃ¶nderilen Transferler\n    receiveTransfers: Transfer[]; // AlÄ±nan Transferler\n    newTransfer = new Transfer(); // Form Ä°Ã§in Transfer Objesi TanÄ±mlama\n\n    accounts: Account[]; // Transfer Eklemek Ä°Ã§in Gerekli GÃ¶nderen KullanÄ±cÄ± Hesap Bilgileri\n    userAnotherAccounts: Account[]; // Virman Eklemek Ä°Ã§in Gerekli AlÄ±cÄ± KullanÄ±cÄ± Hesap Bilgileri\n\n    username: string; // GiriÅ Yapan KullanÄ±cÄ±\n    rate: number = 15; // Faiz OranÄ±\n\n    closeResult: string;\n    now = formatDate(new Date(), 'dd/MM/yyyy', 'en'); // KayÄ±t Tarihi Ä°Ã§in Tutulan DeÄiÅken\n\n    constructor(\n        private formBuilder: FormBuilder,\n        public route: ActivatedRoute,\n        private router: Router,\n        private session: SessionService,\n        private transferSErvice: TransferService,\n        private accountService: AccountService,\n        private currencyService: CurrencyConverterService,\n        private modalService: NgbModal\n    ) {\n        if (!session.getToken()) {\n            // EÄer giriÅ yapan kullanÄ±cÄ± yoksa Login sayfasÄ±na yÃ¶nlendirir.\n            this.router.navigateByUrl('/login');\n        } else {\n            this.getFirst(session.getToken());\n        }\n    }\n\n    async getFirst(username: string) {\n        this.username = this.session.getToken(); // Token'dan kullanÄ±cÄ± ismi alÄ±nÄ±p \"username\" deÄiÅkenine kaydedilir.\n        await userAccounts(username).then(\n            // KullanÄ±cÄ±nÄ±n hesaplarÄ± \"accounts\" deÄiÅkenine kaydedilir.\n            (resolve) => (this.accounts = resolve)\n        );\n        await userSendTransfers(username).then(\n            // KullanÄ±cÄ±nÄ±n gÃ¶nderdiÄi transferler \"accountSendTransfers\" deÄiÅkenine kaydedilir.\n            (resolve) => (this.sendTransfers = resolve)\n        );\n        await userReceiveTransfers(username).then(\n            // KullanÄ±cÄ±nÄ±n aldÄ±ÄÄ± transferler \"accountReceiveTransfers\" deÄiÅkenine kaydedilir.\n            (resolve) => (this.receiveTransfers = resolve)\n        );\n    }\n\n    ngOnInit() {\n        this.transferForm = this.formBuilder.group({\n            // Form Ä°le Ä°lgili ValidasyonlarÄ± Belirleme\n            cSendAccountNumber: ['', [Validators.required, Validators.min(1)]],\n            cReceiveAccountNumber: [\n                '',\n                [Validators.required, Validators.min(1)],\n            ],\n            amount: ['', [Validators.required, Validators.min(1)]],\n            description: ['', Validators.required],\n        });\n    }\n\n    /** Validasyon iÃ§in form deÄerlerine ulaÅmayÄ± saÄlayan get metodlarÄ± */\n    get cSendAccountNumber() {\n        return this.transferForm.get('cSendAccountNumber');\n    }\n    get cReceiveAccountNumber() {\n        return this.transferForm.get('cReceiveAccountNumber');\n    }\n    get amount() {\n        return this.transferForm.get('amount');\n    }\n    get description() {\n        return this.transferForm.get('description');\n    }\n\n    open(content: any, transferType: string) {\n        // Transfer Ekleme Modal'Ä±nÄ± AÃ§ma\n        this.addParamToURL(transferType);\n        this.modalService\n            .open(content, { ariaLabelledBy: 'modal-basic-title' })\n            .result.then((result) => {\n                this.closeResult = `Closed with: ${result}`;\n            });\n    }\n\n    async onSubmit() {\n        // Transfer Ekleme Fonksiyonu\n        this.newTransfer = this.transferForm.value;\n        console.log(this.newTransfer);\n\n        // EÄer form'da herhangi bir validasyon hatasÄ± Ã§Ä±karsa iÅlem yapÄ±lmaz!\n        if (this.transferForm.invalid) {\n            alert('Zorunlu AlanlarÄ± Doldurun!');\n            return;\n        }\n\n        let customerSendAccount: Account; // GÃ¶nderen KullanÄ±cÄ± Hesap Bilgisi\n        await getAccount(\n            this.username,\n            this.newTransfer.cSendAccountNumber\n        ).then((response) => {\n            console.log(response);\n            customerSendAccount = response[0];\n        });\n        let customerReceiveAccount: Account; // Alan KullanÄ±cÄ± Hesap Bilgisi\n        if (this.getParamFromURL() === 'Virman') {\n            // EÄer hesap tÃ¼rÃ¼ \"Virman\" ise alÄ±cÄ± hesabÄ± bilgisi kullanÄ±cÄ±n diÄer hesaplarÄ±ndan seÃ§ilir.\n            console.log('virman');\n            await getAccount(\n                this.username,\n                this.newTransfer.cReceiveAccountNumber\n            ).then((response) => {\n                customerReceiveAccount = response[0];\n            });\n        } else {\n            // EÄer hesap tÃ¼rÃ¼ \"Havale\" ise alÄ±cÄ± hesabÄ± bilgisi girilen hesap numarasÄ± bilgisinde gÃ¶re alÄ±nÄ±r.\n            await getAccountAnotherUser(\n                this.username,\n                this.newTransfer.cReceiveAccountNumber\n            )\n                .then((response) => {\n                    if (response.length === 0) {\n                        alert('Alan KullanÄ±cÄ± HesabÄ± BulunamadÄ±!');\n                        return;\n                    } else {\n                        customerReceiveAccount = response[0];\n                    }\n                })\n                .catch((error) => console.log(error));\n        }\n\n        let convertMoney: number;\n        if (customerReceiveAccount !== null) {\n            // EÄer alÄ±cÄ± hesap bilgisi doÄru ise;\n            convertMoney = this.currencyService.convertForAddTransfer(\n                // Para dÃ¶nÃ¼ÅÃ¼mÃ¼ yapÄ±lÄ±r.\n                customerSendAccount.currency,\n                customerReceiveAccount.currency,\n                this.newTransfer.amount\n            );\n            if (this.newTransfer.amount > customerSendAccount.amount) {\n                // Bakiye'nin yeterli olup olmadÄ±ÄÄ± kontrol edilir.\n                alert('ParanÄ±n ÃekileceÄi HesabÄ±nÄ±zda Yeterli Bakiye Yok!');\n                return;\n            } else {\n                let customerSendKey: number; // Hesap gÃ¼ncelleme iÅlemi iÃ§in gÃ¶nderen kullanÄ±cÄ±nÄ±n hesabÄ±nÄ±n primary key'i alÄ±nÄ±r.\n                await getAccountKey(customerSendAccount.accountNumber).then(\n                    (response) => {\n                        customerSendKey = response[0];\n                    }\n                );\n                let customerReceiveKey: number; // Hesap gÃ¼ncelleme iÅlemi iÃ§in alan kullanÄ±cÄ±nÄ±n hesabÄ±nÄ±n primary key'i alÄ±nÄ±r.\n                await getAccountKey(customerReceiveAccount.accountNumber).then(\n                    (response) => {\n                        customerReceiveKey = response[0];\n                    }\n                );\n\n                this.accountService.updateAccountByTransfer(\n                    // Hesaplara gerekli parasal gÃ¼ncellemeler yapÄ±lÄ±r.\n                    customerSendKey,\n                    customerReceiveKey,\n                    customerSendAccount.amount - this.newTransfer.amount,\n                    customerReceiveAccount.amount + convertMoney\n                );\n\n                this.transferSErvice.addTransfer(\n                    // Transfer Eklenir.\n                    this.getParamFromURL(),\n                    this.username,\n                    customerSendAccount.accountName,\n                    customerSendAccount.accountNumber,\n                    customerSendAccount.amount - this.newTransfer.amount,\n                    customerSendAccount.currency,\n                    customerReceiveAccount.customerName,\n                    customerReceiveAccount.accountName,\n                    customerReceiveAccount.accountNumber,\n                    customerReceiveAccount.amount + convertMoney,\n                    -this.newTransfer.amount,\n                    this.newTransfer.description,\n                    this.now\n                );\n            }\n        }\n    }\n\n    addParamToURL(transferType: string) {\n        // Form'da gerekli yerleri deÄiÅtirmek iÃ§in transfer tÃ¼rÃ¼nÃ¼ url'e ekleme fonksiyonu\n        this.router.navigate([], {\n            queryParams: {\n                transferType: transferType,\n            },\n            queryParamsHandling: 'merge',\n        });\n    }\n\n    getParamFromURL(): string {\n        // Form'da gerekli yerleri deÄiÅtirmek iÃ§in transfer tÃ¼rÃ¼nÃ¼ url'den alma fonksiyonu\n        let transferType: string;\n        this.route.queryParams.subscribe((params) => {\n            transferType = params['transferType'];\n        });\n        return transferType;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'absoluteValue',\n})\nexport class AbsoluteValuePipe implements PipeTransform {\n    // Negatif deÄerleri pozitif deÄerlere dÃ¶nÃ¼ÅtÃ¼rme iÅlemi\n    transform(value: any, args?: any): any {\n        return value < 0 ? Math.abs(value) : value;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'myCurrency',\n})\nexport class MyCurrencyPipe implements PipeTransform {\n    // Nokta'dan sonra 2 basamak gÃ¶sterme iÅlemi\n    transform(value: any): any {\n        let result: number = Math.round(value * 100) / 100;\n        return result;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { database } from '../DexieService/BankApplicationDB';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AccountService {\n    constructor() {}\n    ngOnInit() {}\n\n    addAccount(\n        // Hesap Ekleme Fonksiyonu\n        customerName: string,\n        accountName: string,\n        accountNumber: number,\n        amount: number,\n        currency: string,\n        rate: number,\n        date: string\n    ) {\n        database.accounts\n            .put({\n                customerName: customerName,\n                accountName: accountName,\n                accountNumber: accountNumber,\n                amount: amount,\n                currency: currency,\n                rate: rate,\n                date: date,\n            })\n            .then(() => {\n                alert('Hesap BaÅarÄ±yla Eklendi.');\n                window.location.reload();\n            })\n            .catch((error) => {\n                alert('Hata OluÅtu: ' + error);\n            });\n    }\n\n    updateAccount(accountID: number, amount: number) {\n        // Hesap GÃ¼ncelleme Fonksiyonu\n        database.accounts\n            .update(accountID, {\n                amount: amount,\n            })\n            .then((response) => {\n                console.log('GÃ¼ncellendi', '-', response);\n            })\n            .catch((error) => {\n                alert('Hata OluÅtu: ' + error);\n            });\n    }\n    updateAccountByTransfer(\n        // Transfer Eklerken Hesap GÃ¼ncelleme Fonksiyonu\n        sendId: number,\n        receiveId: number,\n        amountSend: number,\n        amountReceive: number\n    ) {\n        database.accounts\n            .update(sendId, {\n                amount: amountSend,\n            })\n            .then((response) => {\n                database.accounts\n                    .update(receiveId, {\n                        amount: amountReceive,\n                    })\n                    .then((response) => {\n                        console.log('GÃ¼ncellendi, AlÄ±cÄ±', '-', response);\n                    })\n                    .catch((err) => console.log('Alan KullanÄ±cÄ± HatasÄ±', err));\n\n                console.log('GÃ¼ncellendi, GÃ¶nderen', '-', response);\n            })\n            .catch((error) => {\n                alert('GÃ¶nderen KullanÄ±cÄ± HatasÄ±: ' + error);\n            });\n    }\n    deleteAccount(accountID: number) {\n        // Hesap Silme Fonksiyonu\n        database.accounts\n            .delete(accountID)\n            .then(() => {\n                alert('Hesap BaÅarÄ±yla Silindi.');\n                window.location.reload();\n            })\n            .catch((error) => {\n                alert('Hata OluÅtu: ' + error);\n            });\n    }\n}\n\nexport async function getAccountName(accountNumber: number) {\n    // Hesap AdÄ± Getirme Fonksiyonu\n    return await database.accounts\n        .where('accountNumber')\n        .equals(accountNumber)\n        .toArray();\n}\nexport async function userAccounts(username: string) {\n    // KullanÄ±cÄ±nÄ±n HesaplarÄ±nÄ± Getirme Fonksiyonu\n    return await database.accounts\n        .where('customerName')\n        .equalsIgnoreCase(username)\n        .reverse()\n        .toArray();\n}\nexport async function userAnotherAccounts(username: string) {\n    // DiÄer KullanÄ±cÄ±larÄ±n HesaplarÄ±nÄ± Getirme Fonksiyonu\n    return await database.accounts\n        .where('customerName')\n        .notEqual(username)\n        .reverse()\n        .toArray();\n}\nexport async function numberOfAccounts(username: string) {\n    // KullanÄ±cÄ±nÄ± Hesap SayÄ±sÄ±nÄ± Bulma Fonksiyonu\n    return await database.accounts\n        .where('customerName')\n        .equalsIgnoreCase(username)\n        .count();\n}\nexport async function getAccountKey(accountNumber: number) {\n    // HesabÄ±n Primary Key'ini Getirme Fonksiyonu\n    return await database.accounts\n        .where('accountNumber')\n        .equals(accountNumber)\n        .primaryKeys();\n}\nexport async function getAccount(username: string, accountNumber: number) {\n    // Hesap DetayÄ±nÄ± Getirme Fonksiyonu\n    return await database.accounts\n        .where({ customerName: username })\n        .and((account) => account.accountNumber == accountNumber)\n        .toArray();\n}\nexport async function getAccountAnotherUser(\n    username: string,\n    accountNumber: number\n) {\n    // DiÄer KullanÄ±cÄ±nÄ±n Hesap DetayÄ±nÄ± Getirme Fonksiyonu\n    return await database.accounts\n        .where({ accountNumber: accountNumber })\n        .and((account) => account.customerName != username)\n        .toArray();\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CurrencyConverterService {\n    currencies = { $: 6, 'â¬': 7, AltÄ±n: 390, TL: 1 }; // Her Bir Para Biriminin TL KarÅÄ±lÄ±ÄÄ±\n\n    constructor() {}\n\n    convertForAddAccount(\n        // Para MiktarÄ±nÄ± Girilen Birimlere GÃ¶re Ãevirme Ä°Ålemi\n        oldAccountCurrency: string,\n        newAccountCurrency: string,\n        newAccountAmount: number\n    ): number {\n        let rate: number =\n            this.currencies[newAccountCurrency] /\n            this.currencies[oldAccountCurrency];\n        let convertedMoney: number = newAccountAmount * rate;\n        return convertedMoney;\n    }\n    convertForAddTransfer(\n        // Para MiktarÄ±nÄ± Girilen Birimlere GÃ¶re Ãevirme Ä°Ålemi\n        oldAccountCurrency: string,\n        newAccountCurrency: string,\n        newAccountAmount: number\n    ): number {\n        let rate: number =\n            this.currencies[newAccountCurrency] /\n            this.currencies[oldAccountCurrency];\n        let convertedMoney: number = newAccountAmount / rate;\n        return convertedMoney;\n    }\n}\n","import { Transfer } from '../../models/Transfer';\nimport { Account } from '../../models/Account';\nimport { Customer } from '../../models/Customer';\nimport Dexie from 'dexie';\n\nexport class BankApplicationDB extends Dexie {\n    public customers: Dexie.Table<Customer, number>;\n    public accounts: Dexie.Table<Account, number>;\n    public transfers: Dexie.Table<Transfer, number>;\n\n    constructor() {\n        super('BankApplicationDB');\n        const db = this;\n\n        // TablolarÄ± TanÄ±mlama\n        db.version(1).stores({\n            customers: '++id,[&username+password]',\n            accounts:\n                '++id,customerName,accountName,&accountNumber,amount,currency,rate,date',\n            transfers:\n                '++id,transferType,cSendName,cSendAccountName,cSendAccountNumber,cSendAccountAmount,cSendAccountCurrency,cReceiveName,cReceiveAccountName,cReceiveAccountNumber,cReceiveAccountAmount,amount,description,date',\n        });\n\n        // TablolarÄ± halihazÄ±rdaki model'lere eÅitleme\n        db.customers.mapToClass(Customer);\n        db.accounts.mapToClass(Account);\n        db.transfers.mapToClass(Transfer);\n    }\n}\n\nexport var database = new BankApplicationDB();\n","import { Router } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { database } from '../DexieService/BankApplicationDB';\n\nexport const TOKEN_NAME: string = 'token';\n@Injectable({\n    providedIn: 'root',\n})\nexport class SessionService {\n    constructor(private router: Router) {}\n    ngOnInit() {}\n\n    getToken(): string {\n        // GiriÅ yapan kullanÄ±cÄ±nÄ±n tokenÄ±nÄ± local storage'dan Ã§ekme iÅlemi\n        return localStorage.getItem(TOKEN_NAME);\n    }\n    setToken(token: string): void {\n        // GiriÅ yapan kullanÄ±cÄ±nÄ±n tokenÄ±nÄ± local storage'a kaydetme iÅlemi\n        // ! Backend olmadÄ±ÄÄ±ndan gerÃ§ek bir token yerine kullanÄ±cÄ± adÄ±nÄ± local storage'a ekliyorum.\n        localStorage.setItem(TOKEN_NAME, token);\n    }\n\n    register(username: string, password: string) {\n        // KayÄ±t Olma Fonksiyonu\n        database.customers\n            .put({ username: username, password: password })\n            .then(() => {\n                alert('KayÄ±t BaÅarÄ±lÄ±');\n                // EÄer veritabanÄ±nda bÃ¶yle bir kullanÄ±cÄ± yoksa yeni kullanÄ±cÄ±yÄ± eklenir ve login sayfasÄ±na yÃ¶nlendirilir.\n                this.router.navigateByUrl('/login');\n            })\n            .catch((error) => {\n                alert(\n                    'Bu Ä°sim KullanÄ±lmakta! BaÅka Bir KullanÄ±cÄ± AdÄ± Deneyiniz!'\n                );\n            });\n    }\n\n    login(username: string, password: string) {\n        // GiriÅ Yapma Fonksiyonu\n        database.customers\n            .where({ username: username, password: password })\n            .toArray()\n            .then((list) => {\n                if (list.length === 0) {\n                    // EÄer bu bilgilere sahip bir kayÄ±tlÄ± kullanÄ±cÄ± yoksa,\n                    alert('HatalÄ± Ya Da Eksik Bilgi Girdiniz!');\n                } else {\n                    // EÄer bu bilgilere sahip bir kayÄ±tlÄ± kullanÄ±cÄ± varsa,\n                    list.forEach((item) => {\n                        if (item) {\n                            alert('GiriÅ BaÅarÄ±lÄ±');\n                            this.setToken(item.username); // EÄer giriÅ baÅarÄ±lÄ± ise token local storage'a kaydedilir.\n                            this.router.navigateByUrl('/'); // ArdÄ±ndan Ana Sayfaya yÃ¶nlendiriyorum.\n                        }\n                    });\n                }\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    }\n\n    logOut() {\n        // Oturumdan ÃÄ±kÄ±Å Fonksiyonu\n        localStorage.clear(); // Local Storage'dan token temizlenir.\n        window.location.reload(); // Sayfa yenilenerek otomatikman login sayfasÄ±na yÃ¶nlendirilir.\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { database } from '../DexieService/BankApplicationDB';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TransferService {\n    constructor() {}\n\n    addTransfer(\n        // Transfer Ekleme Fonksiyonu\n        transferType: string,\n        cSendName: string,\n        cSendAccountName: string,\n        cSendAccountNumber: number,\n        cSendAccountAmount: number,\n        cSendAccountCurrency: string,\n        cReceiveName: string,\n        cReceiveAccountName: string,\n        cReceiveAccountNumber: number,\n        cReceiveAccountAmount: number,\n        amount: number,\n        description: string,\n        date: string\n    ) {\n        database.transfers\n            .put({\n                transferType: transferType,\n                cSendName: cSendName,\n                cSendAccountName: cSendAccountName,\n                cSendAccountNumber: cSendAccountNumber,\n                cSendAccountAmount: cSendAccountAmount,\n                cSendAccountCurrency: cSendAccountCurrency,\n                cReceiveName: cReceiveName,\n                cReceiveAccountName: cReceiveAccountName,\n                cReceiveAccountNumber: cReceiveAccountNumber,\n                cReceiveAccountAmount: cReceiveAccountAmount,\n                amount: amount,\n                description: description,\n                date: date,\n            })\n            .then(() => {\n                alert('Transfer BaÅarÄ±yla Eklendi.');\n                window.location.reload();\n            })\n            .catch((error) => {\n                alert('Hata OluÅtu: ' + error);\n            });\n    }\n}\n\nexport async function userSendTransfers(username: string) {\n    // KullanÄ±cÄ±nÄ±n GÃ¶nderdiÄi Transferleri Getirme Fonksiyonu\n    return await database.transfers\n        .where('cSendName')\n        .equalsIgnoreCase(username)\n        .reverse()\n        .toArray();\n}\nexport async function userReceiveTransfers(username: string) {\n    // KullanÄ±cÄ±nÄ±n AldÄ±ÄÄ± Transferleri Getirme Fonksiyonu\n    return await database.transfers\n        .where('cReceiveName')\n        .equalsIgnoreCase(username)\n        .and((transfer) => transfer.cSendName !== username)\n        .reverse()\n        .toArray();\n}\nexport async function userTransfersLimitTen(username: string) {\n    // KullanÄ±cÄ±nÄ±n Son 10 Hesap Hareketlerini Getirme Fonksiyonu\n    return await database.transfers\n        .where('cSendName')\n        .equalsIgnoreCase(username)\n        .reverse()\n        .limit(10)\n        .toArray();\n}\nexport async function userAccountSendTransfers(\n    username: string,\n    accountNumber: number\n) {\n    // KullanÄ±cÄ±nÄ±n Tek Bir HesabÄ±na Ait GÃ¶nderdiÄi Transfer Bilgilerini Getirme Fonksiyonu\n    return await database.transfers\n        .where({ cSendName: username })\n        .and((transfer) => transfer.cSendAccountNumber == accountNumber)\n        .reverse()\n        .toArray();\n}\nexport async function userAccountReceiveTransfers(\n    username: string,\n    accountNumber: number\n) {\n    // KullanÄ±cÄ±nÄ±n Tek Bir HesabÄ±na Ait AldÄ±ÄÄ± Transfer Bilgilerini Getirme Fonksiyonu\n    return await database.transfers\n        .where({ cReceiveName: username })\n        .and((transfer) => transfer.cReceiveAccountNumber == accountNumber)\n        .reverse()\n        .toArray();\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch((err) => console.error(err));\n"]}