{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/AccountCard/AccountCard.component.ts","./src/app/components/AccountCard/AccountCard.component.html","./src/app/components/Sidebar/Sidebar.component.ts","./src/app/components/Sidebar/Sidebar.component.html","./src/app/models/Account.ts","./src/app/models/Customer.ts","./src/app/models/Transfer.ts","./src/app/pages/AccountDetailPage/AccountDetailPage.component.ts","./src/app/pages/AccountDetailPage/AccountDetailPage.component.html","./src/app/pages/AccountsPage/AccountsPage.component.ts","./src/app/pages/AccountsPage/AccountsPage.component.html","./src/app/pages/ErrorPage/ErrorPage.component.ts","./src/app/pages/ErrorPage/ErrorPage.component.html","./src/app/pages/LoginPage/LoginPage.component.ts","./src/app/pages/LoginPage/LoginPage.component.html","./src/app/pages/MainPage/MainPage.component.ts","./src/app/pages/MainPage/MainPage.component.html","./src/app/pages/RegisterPage/RegisterPage.component.ts","./src/app/pages/RegisterPage/RegisterPage.component.html","./src/app/pages/TransfersPage/TransfersPage.component.ts","./src/app/pages/TransfersPage/TransfersPage.component.html","./src/app/pipes/absoluteValue/absoluteValue.pipe.ts","./src/app/pipes/myCurrency/myCurrency.pipe.ts","./src/app/services/AccountService/AccountService.service.ts","./src/app/services/CurrencyConverter/CurrencyConverter.service.ts","./src/app/services/DexieService/BankApplicationDB.ts","./src/app/services/SessionService/SessionService.service.ts","./src/app/services/TransferService/TransferService.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2E;AACH;AACxE,WAAW;AAC8B;AACc;AACD;AAEtD,aAAa;AAC8D;AACY;AACH;AACA;AACe;AACzB;;;AAE1E,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,uFAAgB;QAC3B,QAAQ,EAAE;YACN,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE;YACnD,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,oFAAiB,EAAE;YAC9C,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,gGAAqB,EAAE;YACtD,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,mGAAsB,EAAE;YACxD;gBACI,IAAI,EAAE,wBAAwB;gBAC9B,SAAS,EAAE,+GAA0B;aACxC;YACD,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,uFAAkB,EAAE;SACnD;KACJ;IACD,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,uFAAkB,EAAE;IAChD,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,gGAAqB,EAAE;CACzD,CAAC;AAMK,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHhB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,mEAAe,CAAC;QAC9C,4DAAY;mIAEb,gBAAgB,4EAHe,mEAAe,aAC7C,4DAAY;6FAEb,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACN,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,mEAAe,CAAC;gBACxD,OAAO,EAAE,CAAC,4DAAY,CAAC;aAC1B;;AAGM,MAAM,gBAAgB,GAAG;IAC5B,uFAAgB;IAChB,oFAAiB;IACjB,+GAA0B;IAC1B,gGAAqB;IACrB,uFAAkB;IAClB,gGAAqB;IACrB,mGAAsB;CACzB,CAAC;;;;;;;;;;;;;ACjDF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;;;;;;AAUnC,MAAM,YAAY;IAErB,YACY,MAAc,EACd,OAAuB,EACxB,SAA2B;QAF1B,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAgB;QACxB,cAAS,GAAT,SAAS,CAAkB;QAJtC,UAAK,GAAG,kBAAkB,CAAC;QAMvB,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACjC,kGAAkG;QAClG,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAE/B,2FAA2F;QAC3F,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpB,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE;YACrB,gEAAgE;YAChE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;SACvC;IACL,CAAC;IACD,cAAc,CAAC,QAAgB;QAC3B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;;wEApBQ,YAAY;4FAAZ,YAAY;QCVzB,2EAA+B;QAC/B,yEAA2B;;6FDSd,YAAY;cALxB,uDAAS;eAAC;gBACP,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACtC;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoE;AACS;AACS;AACZ;AAChB;AACjB;AACyB;AACnB;AAE2B;AAC3B;AAEQ;AACa;AACG;AACN;;;;;;;;;;AAEjE,kDAAkD;AAC3C,SAAS,qBAAqB,CAAC,IAAgB;IAClD,OAAO,IAAI,+EAAmB,CAAC,IAAI,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC;AACpE,CAAC;AA+BM,MAAM,SAAS;;wFAAT,SAAS,cAFN,2DAAY;4IAEf,SAAS,mBAHP,EAAE,YAjBJ;YACL,uEAAa;YACb,oEAAgB;YAChB,0DAAW;YACX,kEAAmB;YACnB,4DAAY;YACZ,qEAAS;YACT,sEAAgB;YAChB,oEAAe,CAAC,OAAO,CAAC;gBACpB,eAAe,EAAE,IAAI;gBACrB,MAAM,EAAE;oBACJ,OAAO,EAAE,oEAAe;oBACxB,UAAU,EAAE,qBAAqB;oBACjC,IAAI,EAAE,CAAC,gEAAU,CAAC;iBACrB;aACJ,CAAC;SACL;mIAIQ,SAAS,mBA3Bd,2DAAY;QACZ,sFAAgB;QAChB,kGAAoB;QACpB,yFAAiB;QACjB,gFAAc,orBAId,uEAAa;QACb,oEAAgB;QAChB,0DAAW;QACX,kEAAmB;QACnB,4DAAY;QACZ,qEAAS;QACT,sEAAgB;6FAaX,SAAS;cA7BrB,sDAAQ;eAAC;gBACN,YAAY,EAAE;oBACV,2DAAY;oBACZ,sFAAgB;oBAChB,kGAAoB;oBACpB,yFAAiB;oBACjB,gFAAc;oBACd,oEAAgB;iBACnB;gBACD,OAAO,EAAE;oBACL,uEAAa;oBACb,oEAAgB;oBAChB,0DAAW;oBACX,kEAAmB;oBACnB,4DAAY;oBACZ,qEAAS;oBACT,sEAAgB;oBAChB,oEAAe,CAAC,OAAO,CAAC;wBACpB,eAAe,EAAE,IAAI;wBACrB,MAAM,EAAE;4BACJ,OAAO,EAAE,oEAAe;4BACxB,UAAU,EAAE,qBAAqB;4BACjC,IAAI,EAAE,CAAC,gEAAU,CAAC;yBACrB;qBACJ,CAAC;iBACL;gBACD,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC5B;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDiD;AAQc;;;;;;;;;;;ICWpD,6EAMI;IAHA,icAA8C;IAG9C,uDACJ;;IAAA,4DAAS;;IADL,0DACJ;IADI,oKACJ;;;;IA1BR,yEACI;IAAA,yEACI;IAAA,yEACI;IAAA,wEACI;IAAA,uDACJ;IAAA,4DAAK;IACL,uEACI;IAAA,uDAEJ;;IAAA,4DAAI;IACJ,uEACI;IAAA,uDACJ;;IAAA,4DAAI;IACJ,wEACI;IAAA,wDAEJ;;;IAAA,4DAAI;IACR,4DAAM;IAEN,oIAMI;IAEJ,8EAKI;IAFA,6XAA4C;IAE5C,wDACJ;;IAAA,4DAAS;IACb,4DAAM;IACV,4DAAM;;;IA/BU,0DACJ;IADI,8HACJ;IAEI,0DAEJ;IAFI,kMAEJ;IAEI,0DACJ;IADI,qLACJ;IAEI,0DAEJ;IAFI,2PAEJ;IAOA,0DAA2B;IAA3B,wFAA2B;IAS3B,0DACJ;IADI,gKACJ;;;IAlCZ,yEACI;IAAA,wHACI;IAmCR,4DAAM;;;IApCiB,0DAAgC;IAAhC,oFAAgC;;;IAuCnD,qEAAI;IAAA,uDAAsC;;IAAA,4DAAK;;IAA3C,0DAAsC;IAAtC,sJAAsC;;ADvBvC,MAAM,oBAAoB;IAO7B,YACY,KAAqB,EACrB,MAAc,EACd,OAAuB,EACvB,cAA8B,EAC9B,eAAyC;QAJzC,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAgB;QACvB,mBAAc,GAAd,cAAc,CAAgB;QAC9B,oBAAe,GAAf,eAAe,CAA0B;QAEjD,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE;YACrB,gEAAgE;YAChE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;SACvC;aAAM;YACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;SACrC;IACL,CAAC;IAEK,QAAQ,CAAC,QAAgB;;YAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,qEAAqE;YAC9G,MAAM,2GAAY,CAAC,QAAQ,CAAC,CAAC,IAAI;YAC7B,4DAA4D;YAC5D,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,CACzC,CAAC;YACF,MAAM,+GAAgB,CAAC,QAAQ,CAAC,CAAC,IAAI;YACjC,sEAAsE;YACtE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,CACjD,CAAC;QACN,CAAC;KAAA;IACD,QAAQ,KAAI,CAAC;IAEP,aAAa,CAAC,aAAqB;;YACrC,yBAAyB;YACzB,IAAI,SAAiB,CAAC;YACtB,MAAM,4GAAa,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACjD,0CAA0C;gBAC1C,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACxB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,wCAAwC;QAC1F,CAAC;KAAA;IAED,WAAW,CAAC,aAAkB;QAC1B,yCAAyC;QACzC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,CAAC;IACvD,CAAC;;wFAjDQ,oBAAoB;oGAApB,oBAAoB;QCjBjC,gHACI;QAsCJ,4MACI;;;QAxCwB,sFAAwC;;6FDiBvD,oBAAoB;cALhC,uDAAS;eAAC;gBACP,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC7C;;;;;;;;;;;;;;;;;;;;;;;;AEdiD;AAMc;;;;;;;;;ICiC5D,yEACI;IAAA,wEACI;IAAA,uDACJ;;IAAA,4DAAK;IACT,4DAAM;IACN,0EACI;IAAA,6EACI;IADmC,0TAAkB;IACrD,uDACJ;;IAAA,4DAAS;IACT,4EACI;IADkC,uLAAS,gBAAa,IAAC;IACzD,uDACJ;;IAAA,4DAAS;IACb,4DAAM;;IAVE,0DACJ;IADI,kKACJ;IAII,0DACJ;IADI,gKACJ;IAEI,0DACJ;IADI,gKACJ;;ADnCD,MAAM,gBAAgB;IAMzB,YACY,KAAqB,EACrB,MAAc,EACd,OAAuB,EACvB,cAA8B,EAC9B,YAAsB,EACtB,SAA2B;QAL3B,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAgB;QACvB,mBAAc,GAAd,cAAc,CAAgB;QAC9B,iBAAY,GAAZ,YAAY,CAAU;QACtB,cAAS,GAAT,SAAS,CAAkB;QAEnC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE;YACrB,kEAAkE;YAClE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;SACvC;aAAM;YACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;SACrC;IACL,CAAC;IAEK,QAAQ,CAAC,QAAgB;;YAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,qEAAqE;YAC9G,MAAM,+GAAgB,CAAC,QAAQ,CAAC,CAAC,IAAI;YACjC,sEAAsE;YACtE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,CACjD,CAAC;QACN,CAAC;KAAA;IAED,QAAQ,KAAI,CAAC;IAEb,SAAS,CAAC,OAAY;QAClB,yCAAyC;QACzC,IAAI,CAAC,YAAY;aACZ,IAAI,CAAC,OAAO,EAAE;YACX,cAAc,EAAE,mBAAmB;YACnC,QAAQ,EAAE,IAAI;SACjB,CAAC;aACD,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACpB,IAAI,CAAC,WAAW,GAAG,gBAAgB,MAAM,EAAE,CAAC;QAChD,CAAC,CAAC,CAAC;IACX,CAAC;IAED,cAAc,CAAC,QAAgB;QAC3B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IACD,MAAM;QACF,6BAA6B;QAC7B,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;IAC1B,CAAC;;gFAlDQ,gBAAgB;gGAAhB,gBAAgB;;QCjB7B,yEACI;QAAA,qEAAI;QAAA,uDAAc;QAAA,4DAAK;QACvB,gEACA;QAAA,uEACI;QAAA,uDACJ;;QAAA,4DAAI;QACJ,gEACA;QAAA,uEACI;QAAA,uDACJ;;QAAA,4DAAI;QACJ,iEACA;QAAA,wEACI;QAAA,wDACJ;;QAAA,4DAAI;QACJ,iEACA;QAAA,0EACI;QAAA,6EACI;QADkC,sRAAS,kBAAsB,IAAC;QAClE,wDACJ;;QAAA,4DAAS;QACb,4DAAM;QAEN,iEACA;QAAA,0EACI;QAAA,6EAKI;QAFA,yIAAS,mBAAe,IAAI,CAAC,IAAC;QAE9B,8EACJ;QAAA,4DAAS;QACT,6EAKI;QAFA,yIAAS,mBAAe,IAAI,CAAC,IAAC;QAE9B,qEACJ;QAAA,4DAAS;QACb,4DAAM;QACV,4DAAM;QAEN,2MACI;QAeJ,4EAA+B;;QAvDvB,0DAAc;QAAd,6EAAc;QAGd,0DACJ;QADI,2JACJ;QAGI,0DACJ;QADI,6LACJ;QAGI,0DACJ;QADI,kKACJ;QAIQ,0DACJ;QADI,+JACJ;;6FDDK,gBAAgB;cAL5B,uDAAS;eAAC;gBACP,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACzC;;;;;;;;;;;;;;AEhBD;AAAA;AAAO,MAAM,OAAO;CAQnB;;;;;;;;;;;;;ACRD;AAAA;AAAO,MAAM,QAAQ;CAGpB;;;;;;;;;;;;;ACHD;AAAA;AAAO,MAAM,QAAQ;CAepB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACViE;AAEkB;AAGlC;;;;;;;;;;;IC4ClC,qEACI;IAAA,uDACJ;IAAA,4DAAK;;;IADD,0DACJ;IADI,2GACJ;;;IACA,qEACI;IAAA,uDACJ;IAAA,4DAAK;;;IADD,0DACJ;IADI,6GACJ;;;IANJ,qEACI;IAAA,2HACI;IAEJ,2HACI;IAEJ,qEACI;IAAA,uDAEJ;;IAAA,4DAAK;IACL,qEAAI;IAAA,uDAA0B;IAAA,4DAAK;IACnC,qEAAI;IAAA,uDAA8C;;IAAA,4DAAK;IACvD,sEAAI;IAAA,wDAAmB;IAAA,4DAAK;IAChC,4DAAK;;;IAbG,0DAA0C;IAA1C,uGAA0C;IAG1C,0DAA0C;IAA1C,uGAA0C;IAI1C,0DAEJ;IAFI,sMAEJ;IACI,0DAA0B;IAA1B,wFAA0B;IAC1B,0DAA8C;IAA9C,iKAA8C;IAC9C,0DAAmB;IAAnB,iFAAmB;;;IAGvB,qEACI;IAAA,uDACJ;IAAA,4DAAK;;;IADD,0DACJ;IADI,2GACJ;;;IACA,qEACI;IAAA,uDACJ;IAAA,4DAAK;;;IADD,0DACJ;IADI,6GACJ;;;IANJ,qEACI;IAAA,2HACI;IAEJ,2HACI;IAEJ,qEACI;IAAA,uDAEJ;;;IAAA,4DAAK;IACL,qEAAI;IAAA,uDAA0B;IAAA,4DAAK;IACnC,qEAAI;IAAA,wDAAiD;;IAAA,4DAAK;IAC1D,sEAAI;IAAA,wDAAmB;IAAA,4DAAK;IAChC,4DAAK;;;IAbG,0DAA0C;IAA1C,uGAA0C;IAG1C,0DAA0C;IAA1C,uGAA0C;IAI1C,0DAEJ;IAFI,uQAEJ;IACI,0DAA0B;IAA1B,wFAA0B;IAC1B,0DAAiD;IAAjD,qKAAiD;IACjD,0DAAmB;IAAnB,iFAAmB;;ADhEhC,MAAM,0BAA0B;IAQnC,YACY,KAAqB,EACrB,MAAc,EACd,OAAuB,EACvB,cAA8B;QAH9B,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAgB;QACvB,mBAAc,GAAd,cAAc,CAAgB;QAEtC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE;YACrB,kEAAkE;YAClE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;SACvC;aAAM;YACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;SACrC;IACL,CAAC;IAEK,QAAQ,CAAC,QAAgB;;YAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,qEAAqE;YAC9G,MAAM,yGAAU;YACZ,yFAAyF;YACzF,QAAQ,EACR,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAC3C,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;gBACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;YACH,MAAM,kHAAwB;YAC1B,qFAAqF;YACrF,QAAQ,EACR,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAC3C,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAChB,IAAI,CAAC,oBAAoB,GAAG,QAAQ,CAAC;YACzC,CAAC,CAAC,CAAC;YACH,MAAM,qHAA2B;YAC7B,oFAAoF;YACpF,QAAQ,EACR,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAC3C,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAChB,IAAI,CAAC,uBAAuB,GAAG,QAAQ,CAAC;YAC5C,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAED,QAAQ,KAAI,CAAC;;oGA/CJ,0BAA0B;0GAA1B,0BAA0B;QCjBvC,yEAA2B;QAC3B,yEACI;QAAA,yEACI;QAAA,qEAAI;QAAA,uDAAyC;;QAAA,4DAAK;QAClD,gEACA;QAAA,yEACI;QAAA,yEACI;QAAA,qEACI;QAAA,wDACA;;QAAA,wEACI;QAAA,wDACJ;QAAA,4DAAO;QACX,4DAAK;QACT,4DAAM;QACN,0EACI;QAAA,sEACI;QAAA,wDACA;;QAAA,wEAAM;QAAA,wDAA2B;QAAA,4DAAO;QAC5C,4DAAK;QACT,4DAAM;QACN,0EACI;QAAA,sEACI;QAAA,wDACA;;QAAA,wEAAM;QAAA,wDAAiC;;QAAA,4DAAO;QAClD,4DAAK;QACT,4DAAM;QACN,0EACI;QAAA,sEACI;QAAA,wDACA;;QAAA,wEAAM;QAAA,wDAAmB;QAAA,4DAAO;QACpC,4DAAK;QACT,4DAAM;QACN,0EACI;QAAA,yEACI;QAAA,2EACI;QAAA,wDACJ;;QAAA,4DAAO;QACP,wDACJ;QAAA,4DAAK;QACT,4DAAM;QACV,4DAAM;QACN,iEACA;QAAA,sEAAI;QAAA,wDAA0C;;QAAA,4DAAK;QACnD,4EACI;QAAA,4EACI;QAAA,sEACI;QAAA,sEAAI;QAAA,wDAA+C;;QAAA,4DAAK;QACxD,sEAAI;QAAA,wDAAkC;;QAAA,4DAAK;QAC3C,sEAAI;QAAA,wDAAwC;;QAAA,4DAAK;QACjD,sEAAI;QAAA,wDAAmC;;QAAA,4DAAK;QAC5C,sEAAI;QAAA,wDAAgC;;QAAA,4DAAK;QAC7C,4DAAK;QACT,4DAAQ;QACR,wHACI;QAcJ,wHACI;QAcR,4DAAQ;QACZ,4DAAM;QACV,4DAAM;;QAlFM,0DAAyC;QAAzC,0JAAyC;QAKjC,0DACA;QADA,qKACA;QACI,0DACJ;QADI,gIACJ;QAKA,0DACA;QADA,uKACA;QAAM,0DAA2B;QAA3B,0FAA2B;QAKjC,0DACA;QADA,iKACA;QAAM,0DAAiC;QAAjC,sJAAiC;QAKvC,0DACA;QADA,8JACA;QAAM,0DAAmB;QAAnB,2FAAmB;QAMrB,0DACJ;QADI,8JACJ;QACA,0DACJ;QADI,4FACJ;QAIJ,0DAA0C;QAA1C,4JAA0C;QAI9B,0DAA+C;QAA/C,iKAA+C;QAC/C,0DAAkC;QAAlC,oJAAkC;QAClC,0DAAwC;QAAxC,0JAAwC;QACxC,0DAAmC;QAAnC,qJAAmC;QACnC,0DAAgC;QAAhC,kJAAgC;QAGxC,0DAA6C;QAA7C,6FAA6C;QAe7C,0DAAgD;QAAhD,gGAAgD;;6FDnDnD,0BAA0B;cALtC,uDAAS;eAAC;gBACP,QAAQ,EAAE,uBAAuB;gBACjC,WAAW,EAAE,oCAAoC;gBACjD,SAAS,EAAE,CAAC,mCAAmC,CAAC;aACnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEfgD;AACmB;AAClB;AAKL;AAOiB;;;;;;;;;;;;;ICYtC,qEACI;IAAA,qEAAI;IAAA,uDAAyB;IAAA,4DAAK;IAClC,qEAAI;IAAA,uDAA2B;IAAA,4DAAK;IACpC,qEAAI;IAAA,uDAAsB;IAAA,4DAAK;IAC/B,qEAAI;IAAA,uDAAiC;;IAAA,4DAAK;IAC1C,sEAAI;IAAA,wDAAkB;IAAA,4DAAK;IAC3B,sEACI;IAAA,8EAKI;IAFA,6XAA4C;IAE5C,wDACJ;;IAAA,4DAAS;IACb,4DAAK;IACT,4DAAK;;;IAdG,0DAAyB;IAAzB,uFAAyB;IACzB,0DAA2B;IAA3B,yFAA2B;IAC3B,0DAAsB;IAAtB,oFAAsB;IACtB,0DAAiC;IAAjC,mJAAiC;IACjC,0DAAkB;IAAlB,gFAAkB;IAOd,0DACJ;IADI,+JACJ;;;IAhChB,yEAII;IAAA,4EACI;IAAA,4EACI;IAAA,qEACI;IAAA,qEAAI;IAAA,uDAAuC;;IAAA,4DAAK;IAChD,qEACI;IAAA,uDACJ;;IAAA,4DAAK;IACL,sEACI;IAAA,wDACJ;;IAAA,4DAAK;IACL,sEAAI;IAAA,wDAAkC;;IAAA,4DAAK;IAC3C,sEAAI;IAAA,wDAAgC;;IAAA,4DAAK;IACzC,sEAAI;IAAA,wDAAkC;;IAAA,4DAAK;IAC/C,4DAAK;IACT,4DAAQ;IACR,0HACI;IAeR,4DAAQ;IACZ,4DAAM;;;IA7Bc,0DAAuC;IAAvC,uJAAuC;IAEvC,0DACJ;IADI,oKACJ;IAEI,0DACJ;IADI,uKACJ;IACI,0DAAkC;IAAlC,oJAAkC;IAClC,0DAAgC;IAAhC,kJAAgC;IAChC,0DAAkC;IAAlC,oJAAkC;IAG1C,0DAAgC;IAAhC,oFAAgC;;;IAmBxC,qEACI;IAAA,uDACJ;;IAAA,4DAAK;;IADD,0DACJ;IADI,iKACJ;;;IAsCA,oEACI;IAAA,uDAIJ;;IAAA,4DAAI;;IAJA,0DAIJ;IAJI,uLAIJ;;;IAZJ,0EAOI;IAAA,oIACI;IAKR,4DAAM;;;IANC,0DAAmC;IAAnC,qGAAmC;;;IA0BlC,oEACI;IAAA,uDAIJ;;IAAA,4DAAI;;IAJA,0DAIJ;IAJI,kLAIJ;;;IACA,oEACI;IAAA,uDACJ;;IAAA,4DAAI;;IADA,0DACJ;IADI,6KACJ;;;IAdJ,0EAMI;IAAA,0IACI;IAKJ,0IACI;IAER,4DAAM;;;IATC,0DAA8B;IAA9B,gGAA8B;IAM9B,0DAAyB;IAAzB,2FAAyB;;;IAY5B,6EAII;IAAA,uDAMJ;;;;IAAA,4DAAS;;;IARL,uGAAmC;IAEnC,0DAMJ;IANI,0bAMJ;;;IASA,oEACI;IAAA,uDAIJ;;IAAA,4DAAI;;IAJA,0DAIJ;IAJI,2LAIJ;;;IAZJ,0EAOI;IAAA,2IACI;IAKR,4DAAM;;;IANC,0DAAmC;IAAnC,qGAAmC;;;IAwCtC,oEACI;IAAA,uDAIJ;;IAAA,4DAAI;;IAJA,0DAIJ;IAJI,oLAIJ;;;IAZJ,0EAOI;IAAA,2IACI;IAKR,4DAAM;;;IANC,0DAAgC;IAAhC,kGAAgC;;;IAhG3C,0EAII;IAAA,4EACI;IAAA,uDACJ;;IAAA,4DAAQ;IACR,uEAMA;IAAA,wIAMI;IAUJ,gEACA;IAAA,4EACK;IAAA,uDACL;;IAAA,4DAAQ;IACR,8EAII;IAAA,iJAII;IAOR,4DAAS;IACT,0IAOI;IAOJ,2EACI;IAAA,wDAIJ;;IAAA,4DAAM;IACN,6EACI;IAAA,wDACJ;;IAAA,4DAAQ;IACR,8EAII;IAAA,8EAAmB;IAAA,wDAEjB;;IAAA,4DAAS;IACX,8EAAkB;IAAA,wDAEhB;;IAAA,4DAAS;IACX,8EAAkB;IAAA,wDAEhB;;IAAA,4DAAS;IACX,8EAAsB;IAAA,wDAEpB;;IAAA,4DAAS;IACf,4DAAS;IACT,0IAOI;IAOR,4DAAM;;;IAlGE,0DACJ;IADI,gKACJ;IASI,0DAEC;IAFD,2IAEC;IAcA,0DACL;IADK,wKACL;IAMQ,0DAAgC;IAAhC,qFAAgC;IAapC,0DAGC;IAHD,0JAGC;IAUD,0DAIJ;IAJI,wLAIJ;IAEI,0DACJ;IADI,yKACJ;IAKuB,0DAEjB;IAFiB,kKAEjB;IACgB,0DAEhB;IAFgB,4JAEhB;IACgB,0DAEhB;IAFgB,2JAEhB;IACoB,0DAEpB;IAFoB,2JAEpB;IAIF,0DAGC;IAHD,iJAGC;;;IAWL,4EACI;IAAA,uDACJ;;IAAA,4DAAQ;IACR,0EACI;IAAA,uDACJ;;IAAA,4DAAM;IACN,4EACI;IAAA,uDACJ;;IAAA,4DAAQ;IACR,0EACI;IAAA,gEACJ;IAAA,4DAAM;;IAVF,0DACJ;IADI,6JACJ;IAEI,0DACJ;IADI,gLACJ;IAEI,0DACJ;IADI,qKACJ;;;;IA/IZ,0EACI;IAAA,yEACI;IAAA,uDACJ;;IAAA,4DAAK;IACT,4DAAM;IACN,0EACI;IAAA,2EACI;IAD4B,wUAAuB;IACnD,4EACK;IAAA,uDAAyC;;IAAA,4DAC7C;IACD,uEAMA;IAAA,mIAOI;IAOJ,qIAII;IAoGJ,gOACI;IAaJ,2EACI;IAAA,8EACI;IAAA,wDACJ;;IAAA,4DAAS;IACb,4DAAM;IACV,4DAAO;IACX,4DAAM;;;;IAxJE,0DACJ;IADI,uKACJ;IAGM,0DAAyB;IAAzB,yFAAyB;IAEtB,0DAAyC;IAAzC,kKAAyC;IAU1C,0DAGC;IAHD,uJAGC;IAWD,0DAA6C;IAA7C,8FAA6C;IAsHzC,0DACJ;IADI,yKACJ;;ADhMb,MAAM,qBAAqB;IAe9B,YACY,WAAwB,EACxB,KAAqB,EACrB,MAAc,EACd,OAAuB,EACvB,cAA8B,EAC9B,eAAyC,EACzC,YAAsB;QANtB,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAgB;QACvB,mBAAc,GAAd,cAAc,CAAgB;QAC9B,oBAAe,GAAf,eAAe,CAA0B;QACzC,iBAAY,GAAZ,YAAY,CAAU;QAjBlC,eAAU,GAAG,IAAI,uDAAO,EAAE,CAAC,CAAC,sBAAsB;QAClD,iBAAY,GAAY,KAAK,CAAC,CAAC,4DAA4D;QAI3F,SAAI,GAAW,EAAE,CAAC,CAAC,mBAAmB;QAGtC,QAAG,GAAG,kEAAU,CAAC,IAAI,IAAI,EAAE,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,qCAAqC;QAWnF,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE;YACrB,gEAAgE;YAChE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;SACvC;aAAM;YACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;SACrC;IACL,CAAC;IAEK,QAAQ,CAAC,QAAgB;;YAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,qEAAqE;YAC9G,MAAM,oGAAY,CAAC,QAAQ,CAAC,CAAC,IAAI;YAC7B,4DAA4D;YAC5D,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,CACzC,CAAC;YACF,MAAM,wGAAgB,CAAC,QAAQ,CAAC,CAAC,IAAI;YACjC,sEAAsE;YACtE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,CACjD,CAAC;QACN,CAAC;KAAA;IAED,QAAQ;QACJ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACtC,2CAA2C;YAC3C,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACtC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,QAAQ,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACrC,WAAW,EAAE,CAAC,EAAE,CAAC;SACpB,CAAC,CAAC;IACP,CAAC;IAED,uEAAuE;IACvE,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC/C,CAAC;IACD,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IACD,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC;IACD,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC/C,CAAC;IAED,IAAI,CAAC,OAAY;QACb,yCAAyC;QACzC,IAAI,CAAC,YAAY;aACZ,IAAI,CAAC,OAAO,EAAE,EAAE,cAAc,EAAE,mBAAmB,EAAE,CAAC;aACtD,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACpB,IAAI,CAAC,WAAW,GAAG,gBAAgB,MAAM,EAAE,CAAC;QAChD,CAAC,CAAC,CAAC;IACX,CAAC;IAEK,QAAQ;;YACV,0BAA0B;YAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAEzC,8CAA8C;YAC9C,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBAC1B,KAAK,CAAC,4BAA4B,CAAC,CAAC;gBACpC,OAAO;aACV;YACD,IAAI,IAAI,CAAC,gBAAgB,KAAK,CAAC,EAAE;gBAC7B,uDAAuD;gBACvD,MAAM,kGAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI;gBACxD,qDAAqD;gBACrD,CAAC,QAAQ,EAAE,EAAE;oBACT,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACpC,CAAC,CACJ,CAAC;gBAEF,IAAI,YAAY,GAAW,IAAI,CAAC,eAAe,CAAC,oBAAoB;gBAChE,+CAA+C;gBAC/C,IAAI,CAAC,YAAY,CAAC,QAAQ,EAC1B,IAAI,CAAC,UAAU,CAAC,QAAQ,EACxB,IAAI,CAAC,UAAU,CAAC,MAAM,CACzB,CAAC;gBAEF,IAAI,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;oBACzC,0DAA0D;oBAC1D,KAAK,CAAC,oDAAoD,CAAC,CAAC;oBAC5D,OAAO;iBACV;qBAAM;oBACH,uBAAuB;oBACvB,IAAI,SAAiB,CAAC;oBACtB,MAAM,qGAAa,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,IAAI,CACrD,CAAC,QAAQ,EAAE,EAAE;wBACT,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC5B,CAAC,CACJ,CAAC;oBAEF,IAAI,CAAC,cAAc,CAAC,aAAa;oBAC7B,mDAAmD;oBACnD,SAAS,EACT,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,YAAY,CAC1C,CAAC;iBACL;aACJ;YAED,IAAI,aAAa,GAAG,IAAI,CAAC,KAAK;YAC1B,8BAA8B;YAC9B,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CACjD,CAAC;YAEF,IAAI,CAAC,cAAc,CAAC,UAAU;YAC1B,8BAA8B;YAC9B,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,UAAU,CAAC,WAAW,EAC3B,aAAa,EACb,IAAI,CAAC,UAAU,CAAC,MAAM,EACtB,IAAI,CAAC,UAAU,CAAC,QAAQ,EACxB,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,GAAG,CACX,CAAC;QACN,CAAC;KAAA;IAED,WAAW,CAAC,aAAkB;QAC1B,yCAAyC;QACzC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,CAAC;IACvD,CAAC;;0FA/IQ,qBAAqB;qGAArB,qBAAqB;;QCtBlC,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,qEACI;QAAA,uDACJ;;QAAA,4DAAK;QAEL,mHAII;QAiCJ,6MACI;QAIR,4DAAM;QACN,0EACI;QAAA,6EAII;QAFA,4RAAS,aAAgB,IAAC;QAE1B,wDACJ;;QAAA,4DAAS;QACb,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,iNACI;QA4JR,4DAAM;;;QAtNc,0DACJ;QADI,+JACJ;QAII,0DAAwC;QAAxC,sFAAwC;QA8CxC,0DACJ;QADI,wKACJ;;6FDnCH,qBAAqB;cALjC,uDAAS;eAAC;gBACP,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC9C;;;;;;;;;;;;;;AErBD;AAAA;AAAA;AAAkD;;AAO3C,MAAM,kBAAkB;IAE7B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;oFALU,kBAAkB;kGAAlB,kBAAkB;QCP/B,yEACA;QAAA,yEACI;QAAA,yEACI;QAAA,oEACJ;QAAA,4DAAM;QACN,yEACI;QAAA,yEACI;QAAA,uEACI;QAAA,4EACJ;QAAA,4DAAI;QACR,4DAAM;QACV,4DAAM;QACV,4DAAM;QAZN,4DACA;;6FDMa,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,WAAW,EAAE,4BAA4B;gBACzC,SAAS,EAAE,CAAC,2BAA2B,CAAC;aACzC;;;;;;;;;;;;;;AELD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACD;AAEkB;;;;;;;;ICWpD,oEACI;IAAA,uDACJ;;IAAA,4DAAI;;IADA,0DACJ;IADI,4KACJ;;;IANJ,0EAII;IAAA,kHACI;IAER,4DAAM;;;IAHC,0DAAgC;IAAhC,iGAAgC;;;IAkB/B,oEACI;IAAA,uDACJ;;IAAA,4DAAI;;IADA,0DACJ;IADI,4KACJ;;;IARJ,0EAMI;IAAA,kHACI;IAER,4DAAM;;;IAHC,0DAAgC;IAAhC,iGAAgC;;ADtBhD,MAAM,kBAAkB;IAI3B,YACY,WAAwB,EACxB,KAAqB,EACrB,MAAc,EACd,OAAuB;QAHvB,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAgB;QANnC,aAAQ,GAAG,IAAI,yDAAQ,EAAE,CAAC,CAAC,6BAA6B;QAQpD,IAAI,OAAO,CAAC,QAAQ,EAAE,EAAE;YACpB,gEAAgE;YAChE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SACtC;IACL,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACpC,2CAA2C;YAC3C,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACnC,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACtC,CAAC,CAAC;IACP,CAAC;IAED,uEAAuE;IACvE,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC1C,CAAC;IACD,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC1C,CAAC;IAED,QAAQ;QACJ,wBAAwB;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QAErC,sEAAsE;QACtE,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;YACxB,KAAK,CAAC,4BAA4B,CAAC,CAAC;YACpC,OAAO;SACV;QAED,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACvE,CAAC;;oFA3CQ,kBAAkB;kGAAlB,kBAAkB;QCX/B,yEACI;QAAA,yEACI;QAAA,qEAAI;QAAA,uDAA+B;;QAAA,4DAAK;QACxC,0EACI;QAD0B,8IAAY,cAAU,IAAC;QACjD,2EAAsB;QAAA,uDAAkC;;QAAA,4DAAQ;QAChE,sEAMA;QAAA,gHAII;QAIJ,0EACI;QAAA,4EAAsB;QAAA,wDAAkC;;QAAA,4DAAQ;QAChE,uEAMA;QAAA,gHAMI;QAIR,4DAAM;QACN,0EACI;QAAA,6EACI;QAAA,wDACJ;;QAAA,4DAAS;QACT,yEACI;QAAA,wDACJ;;QAAA,4DAAI;QACR,4DAAM;QACV,4DAAO;QACX,4DAAM;QACV,4DAAM;;QA9CM,0DAA+B;QAA/B,+IAA+B;QAC7B,0DAAuB;QAAvB,oFAAuB;QACH,0DAAkC;QAAlC,mJAAkC;QASpD,0DAA+D;QAA/D,qIAA+D;QAOzC,0DAAkC;QAAlC,oJAAkC;QASpD,0DAEC;QAFD,qIAEC;QASD,0DACJ;QADI,4JACJ;QAEI,0DACJ;QADI,+JACJ;;6FDjCH,kBAAkB;cAL9B,uDAAS;eAAC;gBACP,QAAQ,EAAE,eAAe;gBACzB,WAAW,EAAE,4BAA4B;gBACzC,SAAS,EAAE,CAAC,2BAA2B,CAAC;aAC3C;;;;;;;;;;;;;;;;;;;;;;;;;;;AERiD;AAMgB;;;;;;;;;;IC6B1C,qEACI;IAAA,qEAAI;IAAA,uDAAiC;IAAA,4DAAK;IAC1C,qEAAI;IAAA,uDAAoC;IAAA,4DAAK;IAC7C,qEACI;IAAA,uDAEJ;;IAAA,4DAAK;IACL,qEAAI;IAAA,uDAA0B;IAAA,4DAAK;IACvC,4DAAK;;;IAPG,0DAAiC;IAAjC,+FAAiC;IACjC,0DAAoC;IAApC,kGAAoC;IAEpC,0DAEJ;IAFI,sMAEJ;IACI,0DAA0B;IAA1B,wFAA0B;;;IAElC,qEACI;IAAA,qEAAI;IAAA,uDAAiC;IAAA,4DAAK;IAC1C,qEAAI;IAAA,uDAAoC;IAAA,4DAAK;IAC7C,qEACI;IAAA,uDAIJ;;;IAAA,4DAAK;IACL,qEAAI;IAAA,wDAA0B;IAAA,4DAAK;IACvC,4DAAK;;;IATG,0DAAiC;IAAjC,+FAAiC;IACjC,0DAAoC;IAApC,kGAAoC;IAEpC,0DAIJ;IAJI,uQAIJ;IACI,0DAA0B;IAA1B,wFAA0B;;;IA7C1C,sEAOI;IAAA,2EACI;IAAA,2EACI;IAAA,qEACI;IAAA,qEACI;IAAA,uDAGJ;;IAAA,4DAAK;IACL,qEACI;IAAA,uDAIJ;;IAAA,4DAAK;IACL,sEAAI;IAAA,wDAAkC;;IAAA,4DAAK;IAC3C,sEACI;IAAA,wDACJ;;IAAA,4DAAK;IACT,4DAAK;IACT,4DAAQ;IACR,qHACI;IAQJ,qHACI;IAUR,4DAAQ;IACZ,4DAAM;;;IArCc,0DAGJ;IAHI,yKAGJ;IAEI,0DAIJ;IAJI,4KAIJ;IACI,0DAAkC;IAAlC,oJAAkC;IAElC,0DACJ;IADI,qKACJ;IAGJ,0DAAsC;IAAtC,yFAAsC;IAStC,0DAAyC;IAAzC,4FAAyC;;;IAcjD,qEAAI;IAAA,uDAAyC;;IAAA,4DAAK;;IAA9C,0DAAyC;IAAzC,yJAAyC;;AD7C1D,MAAM,iBAAiB;IAK1B,YAAoB,MAAc,EAAU,OAAuB;QAA/C,WAAM,GAAN,MAAM,CAAQ;QAAU,YAAO,GAAP,OAAO,CAAgB;QAC/D,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE;YACrB,gEAAgE;YAChE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;SACvC;aAAM;YACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;SACrC;IACL,CAAC;IAEK,QAAQ,CAAC,QAAgB;;YAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,qEAAqE;YAC9G,MAAM,kHAAiB,CAAC,QAAQ,CAAC,CAAC,IAAI;YAClC,qFAAqF;YACrF,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,CAC9C,CAAC;YACF,MAAM,qHAAoB,CAAC,QAAQ,CAAC,CAAC,IAAI;YACrC,oFAAoF;YACpF,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,CACjD,CAAC;QACN,CAAC;KAAA;IAED,QAAQ,KAAI,CAAC;;kFA1BJ,iBAAiB;iGAAjB,iBAAiB;QCf9B,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,qEAAI;QAAA,uDAAoC;;QAAA,4DAAK;QAC7C,gEACA;QAAA,6EAAmC;QACnC,gEACA;QAAA,sEAAI;QAAA,wDAA2C;;QAAA,4DAAK;QACpD,iEACA;QAAA,iHAOI;QA0CJ,2MACI;QAER,4DAAM;QACN,0EACI;QAAA,sEAAI;QAAA,wDAAgC;;QAAA,4DAAK;QACzC,sEAAI;QAAA,wDAAgD;;QAAA,4DAAK;QACzD,sEAAI;QAAA,wDAA+C;;QAAA,4DAAK;QACxD,sEAAI;QAAA,wDAAiD;;QAAA,4DAAK;QAC9D,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;;;QAnEc,0DAAoC;QAApC,oJAAoC;QAIpC,0DAA2C;QAA3C,6JAA2C;QAG3C,0DAIC;QAJD,qIAIC;QAiDD,0DAAgC;QAAhC,kJAAgC;QAChC,0DAAgD;QAAhD,2KAAgD;QAChD,0DAA+C;QAA/C,0KAA+C;QAC/C,0DAAiD;QAAjD,4KAAiD;;6FDpDxD,iBAAiB;cAL7B,uDAAS;eAAC;gBACP,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,0BAA0B,CAAC;aAC1C;;;;;;;;;;;;;;AEdD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AAED;AAEkB;;;;;;;;ICWpD,oEACI;IAAA,uDACJ;;IAAA,4DAAI;;IADA,0DACJ;IADI,4KACJ;;;IANJ,0EAII;IAAA,qHACI;IAER,4DAAM;;;IAHC,0DAAgC;IAAhC,iGAAgC;;;IAmB/B,oEACI;IAAA,uDACJ;;IAAA,4DAAI;;IADA,0DACJ;IADI,4KACJ;;;IACA,oEACI;IAAA,uDACJ;;IAAA,4DAAI;;IADA,0DACJ;IADI,uKACJ;;;IAXJ,0EAMI;IAAA,qHACI;IAEJ,qHACI;IAER,4DAAM;;;IANC,0DAAgC;IAAhC,iGAAgC;IAGhC,0DAAiC;IAAjC,kGAAiC;;AD1BjD,MAAM,qBAAqB;IAI9B,YACY,WAAwB,EACxB,KAAqB,EACrB,MAAc,EACd,OAAuB;QAHvB,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAgB;QANnC,aAAQ,GAAG,IAAI,yDAAQ,EAAE,CAAC,CAAC,6BAA6B;QAQpD,IAAI,OAAO,CAAC,QAAQ,EAAE,EAAE;YACpB,gEAAgE;YAChE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SACtC;IACL,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACvC,2CAA2C;YAC3C,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACnC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SACjE,CAAC,CAAC;IACP,CAAC;IAED,uEAAuE;IACvE,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IACD,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IAED,QAAQ;QACJ,6BAA6B;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QAExC,sEAAsE;QACtE,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YAC3B,KAAK,CAAC,4BAA4B,CAAC,CAAC;YACpC,OAAO;SACV;QAED,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC1E,CAAC;;0FA3CQ,qBAAqB;qGAArB,qBAAqB;QCXlC,yEACI;QAAA,yEACI;QAAA,qEAAI;QAAA,uDAAkC;;QAAA,4DAAK;QAC3C,0EACI;QAD6B,iJAAY,cAAU,IAAC;QACpD,2EAAsB;QAAA,uDAAkC;;QAAA,4DAAQ;QAChE,sEAMA;QAAA,mHAII;QAIJ,0EACI;QAAA,4EAAsB;QAAA,wDAAkC;;QAAA,4DAAQ;QAChE,uEAOA;QAAA,mHAMI;QAOR,4DAAM;QACN,0EACI;QAAA,6EACI;QAAA,wDACJ;;QAAA,4DAAS;QACT,yEACI;QAAA,wDACJ;;QAAA,4DAAI;QACR,4DAAM;QACV,4DAAO;QACX,4DAAM;QACV,4DAAM;;QAlDM,0DAAkC;QAAlC,kJAAkC;QAChC,0DAA0B;QAA1B,uFAA0B;QACN,0DAAkC;QAAlC,mJAAkC;QASpD,0DAA+D;QAA/D,qIAA+D;QAOzC,0DAAkC;QAAlC,oJAAkC;QAUpD,0DAEC;QAFD,qIAEC;QAYD,0DACJ;QADI,+JACJ;QAEI,0DACJ;QADI,4JACJ;;6FDrCH,qBAAqB;cALjC,uDAAS;eAAC;gBACP,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEJ+D;AAOE;AAEf;AACD;AAEkB;AAEvB;;;;;;;;;;;;;;ICmBrB,qEACI;IAAA,qEAAI;IAAA,uDAA+B;IAAA,4DAAK;IACxC,qEAAI;IAAA,uDAAiC;IAAA,4DAAK;IAC1C,qEAAI;IAAA,uDAAoC;IAAA,4DAAK;IAC7C,qEAAI;IAAA,uDAAmC;IAAA,4DAAK;IAC5C,qEAAI;IAAA,wDAAkC;;IAAA,4DAAK;IAC3C,sEAAI;IAAA,wDAA0B;IAAA,4DAAK;IACnC,sEAAI;IAAA,wDAAmB;IAAA,4DAAK;IAChC,4DAAK;;;IAPG,0DAA+B;IAA/B,6FAA+B;IAC/B,0DAAiC;IAAjC,+FAAiC;IACjC,0DAAoC;IAApC,kGAAoC;IACpC,0DAAmC;IAAnC,iGAAmC;IACnC,0DAAkC;IAAlC,qJAAkC;IAClC,0DAA0B;IAA1B,wFAA0B;IAC1B,0DAAmB;IAAnB,iFAAmB;;;IAE3B,qEACI;IAAA,qEAAI;IAAA,uDAA+B;IAAA,4DAAK;IACxC,qEAAI;IAAA,uDAAiC;IAAA,4DAAK;IAC1C,qEAAI;IAAA,uDAAoC;IAAA,4DAAK;IAC7C,qEAAI;IAAA,uDAAmC;IAAA,4DAAK;IAC5C,qEACI;IAAA,wDAGJ;;;IAAA,4DAAK;IACL,sEAAI;IAAA,wDAA0B;IAAA,4DAAK;IACnC,sEAAI;IAAA,wDAAmB;IAAA,4DAAK;IAChC,4DAAK;;;IAXG,0DAA+B;IAA/B,6FAA+B;IAC/B,0DAAiC;IAAjC,+FAAiC;IACjC,0DAAoC;IAApC,kGAAoC;IACpC,0DAAmC;IAAnC,iGAAmC;IAEnC,0DAGJ;IAHI,kOAGJ;IACI,0DAA0B;IAA1B,wFAA0B;IAC1B,0DAAmB;IAAnB,iFAAmB;;;IAtDnC,sEAOI;IAAA,2EACI;IAAA,4EACI;IAAA,qEACI;IAAA,qEACI;IAAA,uDACJ;;IAAA,4DAAK;IACL,qEACI;IAAA,uDAGJ;;IAAA,4DAAK;IACL,sEACI;IAAA,wDAIJ;;IAAA,4DAAK;IACL,sEACI;IAAA,wDACJ;;IAAA,4DAAK;IACL,sEAAI;IAAA,wDAAkC;;IAAA,4DAAK;IAC3C,sEACI;IAAA,wDACJ;;IAAA,4DAAK;IACL,sEAAI;IAAA,wDAAgC;;IAAA,4DAAK;IAC7C,4DAAK;IACT,4DAAQ;IACR,0HACI;IAQJ,2HACI;IAYR,4DAAQ;IACZ,4DAAM;;;IA9Cc,0DACJ;IADI,uKACJ;IAEI,0DAGJ;IAHI,0KAGJ;IAEI,0DAIJ;IAJI,8KAIJ;IAEI,0DACJ;IADI,uKACJ;IACI,0DAAkC;IAAlC,oJAAkC;IAElC,0DACJ;IADI,qKACJ;IACI,0DAAgC;IAAhC,kJAAgC;IAGxC,0DAAsC;IAAtC,yFAAsC;IAStC,0DAAyC;IAAzC,4FAAyC;;;IAgBjD,qEACI;IAAA,uDACJ;;IAAA,4DAAK;;IADD,0DACJ;IADI,mKACJ;;;IAoCA,6EAII;IAAA,uDAMJ;;;;IAAA,4DAAS;;;IARL,uGAAmC;IAEnC,0DAMJ;IANI,0bAMJ;;;IASA,oEACI;IAAA,uDACJ;;IAAA,4DAAI;;IADA,0DACJ;IADI,iLACJ;;;IATJ,0EAOI;IAAA,qIACI;IAER,4DAAM;;;IAHC,0DAA0C;IAA1C,4GAA0C;;;IAezC,6EAII;IAAA,uDAMJ;;;;IAAA,4DAAS;;;IARL,uGAAmC;IAEnC,0DAMJ;IANI,0bAMJ;;;IAfR,sEACI;IAAA,6EAII;IAAA,gJAII;IAOR,4DAAS;IACb,4DAAM;;;IAXM,0DAAgC;IAAhC,qFAAgC;;;IA2BpC,oEACI;IAAA,uDAIJ;;IAAA,4DAAI;;IAJA,0DAIJ;IAJI,oLAIJ;;;IACA,oEACI;IAAA,uDACJ;;IAAA,4DAAI;;IADA,0DACJ;IADI,8KACJ;;;IAhBJ,0EAQI;IAAA,mJACI;IAKJ,mJACI;IAER,4DAAM;;;IATC,0DAA6C;IAA7C,+GAA6C;IAM7C,0DAAwC;IAAxC,0GAAwC;;;IApB/C,uEAMA;IAAA,iJAQI;;;IANA,0DAIC;IAJD,wLAIC;;;IAwBL,oEACI;IAAA,uDACJ;;IAAA,4DAAI;;IADA,0DACJ;IADI,kLACJ;;;IACA,oEACI;IAAA,uDACJ;;IAAA,4DAAI;;IADA,0DACJ;IADI,6KACJ;;;IATJ,0EAII;IAAA,qIACI;IAEJ,qIACI;IAER,4DAAM;;;IANC,0DAA8B;IAA9B,gGAA8B;IAG9B,0DAAyB;IAAzB,2FAAyB;;;IAmB5B,oEACI;IAAA,uDAIJ;;IAAA,4DAAI;;IAJA,0DAIJ;IAJI,wLAIJ;;;IAZJ,0EAOI;IAAA,qIACI;IAKR,4DAAM;;;IANC,0DAAmC;IAAnC,qGAAmC;;;;IAxHlD,0EACI;IAAA,yEACI;IAAA,uDACJ;;IAAA,4DAAK;IACT,4DAAM;IACN,0EACI;IAAA,2EACI;IAD6B,yUAAuB;IACpD,4EACI;IAAA,uDACJ;;IAAA,4DAAQ;IACR,6EAII;IAAA,2IAII;IAOR,4DAAS;IACT,oIAOI;IAIJ,2EACI;IAAA,wDACJ;;IAAA,4DAAM;IACN,6EACI;IAAA,wDACJ;;IAAA,4DAAQ;IACR,mIACI;IAiBJ,gOACI;IAyBJ,6EAAoB;IAAA,wDAAoC;;IAAA,4DAAQ;IAChE,wEAMA;IAAA,oIAII;IAOJ,6EACI;IAAA,wDACJ;;IAAA,4DAAQ;IACR,wEAKA;IAAA,oIAOI;IAOJ,2EACI;IAAA,8EACI;IAAA,wDACJ;;IAAA,4DAAS;IACb,4DAAM;IACV,4DAAO;IACX,4DAAM;;;;IAnIE,0DACJ;IADI,sKACJ;IAGM,0DAA0B;IAA1B,0FAA0B;IAExB,0DACJ;IADI,4KACJ;IAMQ,0DAAgC;IAAhC,oFAAgC;IAapC,0DAGC;IAHD,4KAGC;IAOD,0DACJ;IADI,wLACJ;IAEI,0DACJ;IADI,gLACJ;IACK,0DAAwD;IAAxD,uGAAwD;IA4CzC,0DAAoC;IAApC,+JAAoC;IASpD,0DAAyD;IAAzD,wIAAyD;IAUzD,0DACJ;IADI,uKACJ;IAQI,0DAGC;IAHD,uJAGC;IAWG,0DACJ;IADI,mKACJ;;AD/Lb,MAAM,sBAAsB;IAgB/B,YACY,WAAwB,EACzB,KAAqB,EACpB,MAAc,EACd,OAAuB,EACvB,eAAgC,EAChC,cAA8B,EAC9B,eAAyC,EACzC,YAAsB;QAPtB,gBAAW,GAAX,WAAW,CAAa;QACzB,UAAK,GAAL,KAAK,CAAgB;QACpB,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAgB;QACvB,oBAAe,GAAf,eAAe,CAAiB;QAChC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,oBAAe,GAAf,eAAe,CAA0B;QACzC,iBAAY,GAAZ,YAAY,CAAU;QAnBlC,gBAAW,GAAG,IAAI,yDAAQ,EAAE,CAAC,CAAC,sCAAsC;QAMpE,SAAI,GAAW,EAAE,CAAC,CAAC,aAAa;QAGhC,QAAG,GAAG,kEAAU,CAAC,IAAI,IAAI,EAAE,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,qCAAqC;QAYnF,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE;YACrB,gEAAgE;YAChE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;SACvC;aAAM;YACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;SACrC;IACL,CAAC;IAEK,QAAQ,CAAC,QAAgB;;YAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,qEAAqE;YAC9G,MAAM,2GAAY,CAAC,QAAQ,CAAC,CAAC,IAAI;YAC7B,4DAA4D;YAC5D,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,CACzC,CAAC;YACF,MAAM,2GAAiB,CAAC,QAAQ,CAAC,CAAC,IAAI;YAClC,qFAAqF;YACrF,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,CAC9C,CAAC;YACF,MAAM,8GAAoB,CAAC,QAAQ,CAAC,CAAC,IAAI;YACrC,oFAAoF;YACpF,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,CACjD,CAAC;QACN,CAAC;KAAA;IAED,QAAQ;QACJ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACvC,2CAA2C;YAC3C,kBAAkB,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,qBAAqB,EAAE;gBACnB,EAAE;gBACF,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aAC3C;YACD,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACtD,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACzC,CAAC,CAAC;IACP,CAAC;IAED,uEAAuE;IACvE,IAAI,kBAAkB;QAClB,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IACvD,CAAC;IACD,IAAI,qBAAqB;QACrB,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;IAC1D,CAAC;IACD,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAC;IACD,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAChD,CAAC;IAED,IAAI,CAAC,OAAY,EAAE,YAAoB;QACnC,iCAAiC;QACjC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QACjC,IAAI,CAAC,YAAY;aACZ,IAAI,CAAC,OAAO,EAAE,EAAE,cAAc,EAAE,mBAAmB,EAAE,CAAC;aACtD,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACpB,IAAI,CAAC,WAAW,GAAG,gBAAgB,MAAM,EAAE,CAAC;QAChD,CAAC,CAAC,CAAC;IACX,CAAC;IAEK,QAAQ;;YACV,6BAA6B;YAC7B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YAC3C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAE9B,sEAAsE;YACtE,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;gBAC3B,KAAK,CAAC,4BAA4B,CAAC,CAAC;gBACpC,OAAO;aACV;YAED,IAAI,mBAA4B,CAAC,CAAC,mCAAmC;YACrE,MAAM,yGAAU,CACZ,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,WAAW,CAAC,kBAAkB,CACtC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAChB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACtB,mBAAmB,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;YACH,IAAI,sBAA+B,CAAC,CAAC,+BAA+B;YACpE,IAAI,IAAI,CAAC,eAAe,EAAE,KAAK,QAAQ,EAAE;gBACrC,4FAA4F;gBAC5F,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACtB,MAAM,yGAAU,CACZ,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,WAAW,CAAC,qBAAqB,CACzC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;oBAChB,sBAAsB,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;aACN;iBAAM;gBACH,mGAAmG;gBACnG,MAAM,oHAAqB,CACvB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,WAAW,CAAC,qBAAqB,CACzC;qBACI,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;oBACf,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;wBACvB,KAAK,CAAC,mCAAmC,CAAC,CAAC;wBAC3C,OAAO;qBACV;yBAAM;wBACH,sBAAsB,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;qBACxC;gBACL,CAAC,CAAC;qBACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;aAC7C;YAED,IAAI,YAAoB,CAAC;YACzB,IAAI,sBAAsB,KAAK,IAAI,EAAE;gBACjC,sCAAsC;gBACtC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,qBAAqB;gBACrD,yBAAyB;gBACzB,mBAAmB,CAAC,QAAQ,EAC5B,sBAAsB,CAAC,QAAQ,EAC/B,IAAI,CAAC,WAAW,CAAC,MAAM,CAC1B,CAAC;gBACF,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,mBAAmB,CAAC,MAAM,EAAE;oBACtD,mDAAmD;oBACnD,KAAK,CAAC,oDAAoD,CAAC,CAAC;oBAC5D,OAAO;iBACV;qBAAM;oBACH,IAAI,eAAuB,CAAC,CAAC,qFAAqF;oBAClH,MAAM,4GAAa,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,IAAI,CACvD,CAAC,QAAQ,EAAE,EAAE;wBACT,eAAe,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAClC,CAAC,CACJ,CAAC;oBACF,IAAI,kBAA0B,CAAC,CAAC,iFAAiF;oBACjH,MAAM,4GAAa,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,IAAI,CAC1D,CAAC,QAAQ,EAAE,EAAE;wBACT,kBAAkB,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACrC,CAAC,CACJ,CAAC;oBAEF,IAAI,CAAC,cAAc,CAAC,uBAAuB;oBACvC,mDAAmD;oBACnD,eAAe,EACf,kBAAkB,EAClB,mBAAmB,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EACpD,sBAAsB,CAAC,MAAM,GAAG,YAAY,CAC/C,CAAC;oBAEF,IAAI,CAAC,eAAe,CAAC,WAAW;oBAC5B,oBAAoB;oBACpB,IAAI,CAAC,eAAe,EAAE,EACtB,IAAI,CAAC,QAAQ,EACb,mBAAmB,CAAC,WAAW,EAC/B,mBAAmB,CAAC,aAAa,EACjC,mBAAmB,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EACpD,mBAAmB,CAAC,QAAQ,EAC5B,sBAAsB,CAAC,YAAY,EACnC,sBAAsB,CAAC,WAAW,EAClC,sBAAsB,CAAC,aAAa,EACpC,sBAAsB,CAAC,MAAM,GAAG,YAAY,EAC5C,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EACxB,IAAI,CAAC,WAAW,CAAC,WAAW,EAC5B,IAAI,CAAC,GAAG,CACX,CAAC;iBACL;aACJ;QACL,CAAC;KAAA;IAED,aAAa,CAAC,YAAoB;QAC9B,mFAAmF;QACnF,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE;YACrB,WAAW,EAAE;gBACT,YAAY,EAAE,YAAY;aAC7B;YACD,mBAAmB,EAAE,OAAO;SAC/B,CAAC,CAAC;IACP,CAAC;IAED,eAAe;QACX,mFAAmF;QACnF,IAAI,YAAoB,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE;YACxC,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QACH,OAAO,YAAY,CAAC;IACxB,CAAC;;4FA7MQ,sBAAsB;sGAAtB,sBAAsB;;QC3BnC,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,qEAAI;QAAA,uDAAqC;;QAAA,4DAAK;QAC9C,oHAOI;QAmDJ,8MACI;QAIR,4DAAM;QACN,0EACI;QAAA,6EAII;QAFA,6RAAS,cAAkB,QAAQ,CAAC,IAAC;QAErC,wDACJ;;QAAA,4DAAS;QACT,iEACA;QAAA,6EAII;QAFA,6RAAS,cAAkB,QAAQ,CAAC,IAAC;QAErC,wDACJ;;QAAA,4DAAS;QACb,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,kNACI;QAuIR,4DAAM;;;QA3Nc,0DAAqC;QAArC,qJAAqC;QAErC,0DAIC;QAJD,qIAIC;QAgED,0DACJ;QADI,qKACJ;QAMI,0DACJ;QADI,qKACJ;;6FDvDH,sBAAsB;cALlC,uDAAS;eAAC;gBACP,QAAQ,EAAE,mBAAmB;gBAC7B,WAAW,EAAE,gCAAgC;gBAC7C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC/C;;;;;;;;;;;;;;AE1BD;AAAA;AAAA;AAAoD;;AAK7C,MAAM,iBAAiB;IAC1B,wDAAwD;IACxD,SAAS,CAAC,KAAU,EAAE,IAAU;QAC5B,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAC/C,CAAC;;kFAJQ,iBAAiB;oHAAjB,iBAAiB;6FAAjB,iBAAiB;cAH7B,kDAAI;eAAC;gBACF,IAAI,EAAE,eAAe;aACxB;;;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAoD;;AAK7C,MAAM,cAAc;IACvB,4CAA4C;IAC5C,SAAS,CAAC,KAAU;QAChB,IAAI,MAAM,GAAW,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;QACnD,OAAO,MAAM,CAAC;IAClB,CAAC;;4EALQ,cAAc;8GAAd,cAAc;6FAAd,cAAc;cAH1B,kDAAI;eAAC;gBACF,IAAI,EAAE,YAAY;aACrB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJ0C;AACkB;;AAKtD,MAAM,cAAc;IACvB,gBAAe,CAAC;IAChB,QAAQ,KAAI,CAAC;IAEb,UAAU;IACN,0BAA0B;IAC1B,YAAoB,EACpB,WAAmB,EACnB,aAAqB,EACrB,MAAc,EACd,QAAgB,EAChB,IAAY,EACZ,IAAY;QAEZ,wEAAQ,CAAC,QAAQ;aACZ,GAAG,CAAC;YACD,YAAY,EAAE,YAAY;YAC1B,WAAW,EAAE,WAAW;YACxB,aAAa,EAAE,aAAa;YAC5B,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,QAAQ;YAClB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,IAAI;SACb,CAAC;aACD,IAAI,CAAC,GAAG,EAAE;YACP,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QAC7B,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACX,CAAC;IAED,aAAa,CAAC,SAAiB,EAAE,MAAc;QAC3C,8BAA8B;QAC9B,wEAAQ,CAAC,QAAQ;aACZ,MAAM,CAAC,SAAS,EAAE;YACf,MAAM,EAAE,MAAM;SACjB,CAAC;aACD,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;YACf,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;QAC9C,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACX,CAAC;IACD,uBAAuB;IACnB,gDAAgD;IAChD,MAAc,EACd,SAAiB,EACjB,UAAkB,EAClB,aAAqB;QAErB,wEAAQ,CAAC,QAAQ;aACZ,MAAM,CAAC,MAAM,EAAE;YACZ,MAAM,EAAE,UAAU;SACrB,CAAC;aACD,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;YACf,wEAAQ,CAAC,QAAQ;iBACZ,MAAM,CAAC,SAAS,EAAE;gBACf,MAAM,EAAE,aAAa;aACxB,CAAC;iBACD,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACf,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;YACrD,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAC,CAAC;YAE/D,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;QACxD,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,KAAK,CAAC,6BAA6B,GAAG,KAAK,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACX,CAAC;IACD,aAAa,CAAC,SAAiB;QAC3B,yBAAyB;QACzB,wEAAQ,CAAC,QAAQ;aACZ,MAAM,CAAC,SAAS,CAAC;aACjB,IAAI,CAAC,GAAG,EAAE;YACP,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QAC7B,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACX,CAAC;;4EApFQ,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAFX,MAAM;6FAET,cAAc;cAH1B,wDAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;AAwFM,SAAe,cAAc,CAAC,aAAqB;;QACtD,+BAA+B;QAC/B,OAAO,MAAM,wEAAQ,CAAC,QAAQ;aACzB,KAAK,CAAC,eAAe,CAAC;aACtB,MAAM,CAAC,aAAa,CAAC;aACrB,OAAO,EAAE,CAAC;IACnB,CAAC;CAAA;AACM,SAAe,YAAY,CAAC,QAAgB;;QAC/C,8CAA8C;QAC9C,OAAO,MAAM,wEAAQ,CAAC,QAAQ;aACzB,KAAK,CAAC,cAAc,CAAC;aACrB,gBAAgB,CAAC,QAAQ,CAAC;aAC1B,OAAO,EAAE;aACT,OAAO,EAAE,CAAC;IACnB,CAAC;CAAA;AACM,SAAe,mBAAmB,CAAC,QAAgB;;QACtD,sDAAsD;QACtD,OAAO,MAAM,wEAAQ,CAAC,QAAQ;aACzB,KAAK,CAAC,cAAc,CAAC;aACrB,QAAQ,CAAC,QAAQ,CAAC;aAClB,OAAO,EAAE;aACT,OAAO,EAAE,CAAC;IACnB,CAAC;CAAA;AACM,SAAe,gBAAgB,CAAC,QAAgB;;QACnD,8CAA8C;QAC9C,OAAO,MAAM,wEAAQ,CAAC,QAAQ;aACzB,KAAK,CAAC,cAAc,CAAC;aACrB,gBAAgB,CAAC,QAAQ,CAAC;aAC1B,KAAK,EAAE,CAAC;IACjB,CAAC;CAAA;AACM,SAAe,aAAa,CAAC,aAAqB;;QACrD,6CAA6C;QAC7C,OAAO,MAAM,wEAAQ,CAAC,QAAQ;aACzB,KAAK,CAAC,eAAe,CAAC;aACtB,MAAM,CAAC,aAAa,CAAC;aACrB,WAAW,EAAE,CAAC;IACvB,CAAC;CAAA;AACM,SAAe,UAAU,CAAC,QAAgB,EAAE,aAAqB;;QACpE,oCAAoC;QACpC,OAAO,MAAM,wEAAQ,CAAC,QAAQ;aACzB,KAAK,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC;aACjC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,aAAa,IAAI,aAAa,CAAC;aACxD,OAAO,EAAE,CAAC;IACnB,CAAC;CAAA;AACM,SAAe,qBAAqB,CACvC,QAAgB,EAChB,aAAqB;;QAErB,uDAAuD;QACvD,OAAO,MAAM,wEAAQ,CAAC,QAAQ;aACzB,KAAK,CAAC,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC;aACvC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,IAAI,QAAQ,CAAC;aAClD,OAAO,EAAE,CAAC;IACnB,CAAC;CAAA;;;;;;;;;;;;;AClJD;AAAA;AAAA;AAA2C;;AAKpC,MAAM,wBAAwB;IAGjC;QAFA,eAAU,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,sCAAsC;IAEzE,CAAC;IAEhB,oBAAoB;IAChB,uDAAuD;IACvD,kBAA0B,EAC1B,kBAA0B,EAC1B,gBAAwB;QAExB,IAAI,IAAI,GACJ,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC;YACnC,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,cAAc,GAAW,gBAAgB,GAAG,IAAI,CAAC;QACrD,OAAO,cAAc,CAAC;IAC1B,CAAC;IACD,qBAAqB;IACjB,uDAAuD;IACvD,kBAA0B,EAC1B,kBAA0B,EAC1B,gBAAwB;QAExB,IAAI,IAAI,GACJ,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC;YACnC,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;QACxC,IAAI,cAAc,GAAW,gBAAgB,GAAG,IAAI,CAAC;QACrD,OAAO,cAAc,CAAC;IAC1B,CAAC;;gGA5BQ,wBAAwB;2GAAxB,wBAAwB,WAAxB,wBAAwB,mBAFrB,MAAM;6FAET,wBAAwB;cAHpC,wDAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiD;AACF;AACE;AACvB;AAEnB,MAAM,iBAAkB,SAAQ,6CAAK;IAKxC;QACI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC3B,MAAM,EAAE,GAAG,IAAI,CAAC;QAEhB,sBAAsB;QACtB,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACjB,SAAS,EAAE,2BAA2B;YACtC,QAAQ,EACJ,wEAAwE;YAC5E,SAAS,EACL,8MAA8M;SACrN,CAAC,CAAC;QAEH,8CAA8C;QAC9C,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,yDAAQ,CAAC,CAAC;QAClC,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,uDAAO,CAAC,CAAC;QAChC,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,yDAAQ,CAAC,CAAC;IACtC,CAAC;CACJ;AAEM,IAAI,QAAQ,GAAG,IAAI,iBAAiB,EAAE,CAAC;;;;;;;;;;;;;AC7B9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACkB;;;AAEtD,MAAM,UAAU,GAAW,OAAO,CAAC;AAInC,MAAM,cAAc;IACvB,YAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IACtC,QAAQ,KAAI,CAAC;IAEb,QAAQ;QACJ,mEAAmE;QACnE,OAAO,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC;IACD,QAAQ,CAAC,KAAa;QAClB,oEAAoE;QACpE,4FAA4F;QAC5F,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED,QAAQ,CAAC,QAAgB,EAAE,QAAgB;QACvC,wBAAwB;QACxB,wEAAQ,CAAC,SAAS;aACb,GAAG,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;aAC/C,IAAI,CAAC,GAAG,EAAE;YACP,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACxB,0GAA0G;YAC1G,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACxC,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,KAAK,CACD,2DAA2D,CAC9D,CAAC;QACN,CAAC,CAAC,CAAC;IACX,CAAC;IAED,KAAK,CAAC,QAAgB,EAAE,QAAgB;QACpC,yBAAyB;QACzB,wEAAQ,CAAC,SAAS;aACb,KAAK,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;aACjD,OAAO,EAAE;aACT,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YACX,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBACnB,uDAAuD;gBACvD,KAAK,CAAC,oCAAoC,CAAC,CAAC;aAC/C;iBAAM;gBACH,uDAAuD;gBACvD,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;oBAClB,IAAI,IAAI,EAAE;wBACN,KAAK,CAAC,gBAAgB,CAAC,CAAC;wBACxB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,4DAA4D;wBAC1F,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,wCAAwC;qBAC3E;gBACL,CAAC,CAAC,CAAC;aACN;QACL,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACX,CAAC;IAED,MAAM;QACF,6BAA6B;QAC7B,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC,sCAAsC;QAC5D,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,+DAA+D;IAC7F,CAAC;;4EA3DQ,cAAc;iGAAd,cAAc,WAAd,cAAc,mBAFX,MAAM;6FAET,cAAc;cAH1B,wDAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;;;;;;;;;;;;;;;;;;;;;;;ACP0C;AACkB;;AAKtD,MAAM,eAAe;IACxB,gBAAe,CAAC;IAEhB,WAAW;IACP,6BAA6B;IAC7B,YAAoB,EACpB,SAAiB,EACjB,gBAAwB,EACxB,kBAA0B,EAC1B,kBAA0B,EAC1B,oBAA4B,EAC5B,YAAoB,EACpB,mBAA2B,EAC3B,qBAA6B,EAC7B,qBAA6B,EAC7B,MAAc,EACd,WAAmB,EACnB,IAAY;QAEZ,wEAAQ,CAAC,SAAS;aACb,GAAG,CAAC;YACD,YAAY,EAAE,YAAY;YAC1B,SAAS,EAAE,SAAS;YACpB,gBAAgB,EAAE,gBAAgB;YAClC,kBAAkB,EAAE,kBAAkB;YACtC,kBAAkB,EAAE,kBAAkB;YACtC,oBAAoB,EAAE,oBAAoB;YAC1C,YAAY,EAAE,YAAY;YAC1B,mBAAmB,EAAE,mBAAmB;YACxC,qBAAqB,EAAE,qBAAqB;YAC5C,qBAAqB,EAAE,qBAAqB;YAC5C,MAAM,EAAE,MAAM;YACd,WAAW,EAAE,WAAW;YACxB,IAAI,EAAE,IAAI;SACb,CAAC;aACD,IAAI,CAAC,GAAG,EAAE;YACP,KAAK,CAAC,6BAA6B,CAAC,CAAC;YACrC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QAC7B,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACX,CAAC;;8EA1CQ,eAAe;kGAAf,eAAe,WAAf,eAAe,mBAFZ,MAAM;6FAET,eAAe;cAH3B,wDAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;AA8CM,SAAe,iBAAiB,CAAC,QAAgB;;QACpD,0DAA0D;QAC1D,OAAO,MAAM,wEAAQ,CAAC,SAAS;aAC1B,KAAK,CAAC,WAAW,CAAC;aAClB,gBAAgB,CAAC,QAAQ,CAAC;aAC1B,OAAO,EAAE;aACT,OAAO,EAAE,CAAC;IACnB,CAAC;CAAA;AACM,SAAe,oBAAoB,CAAC,QAAgB;;QACvD,sDAAsD;QACtD,OAAO,MAAM,wEAAQ,CAAC,SAAS;aAC1B,KAAK,CAAC,cAAc,CAAC;aACrB,gBAAgB,CAAC,QAAQ,CAAC;aAC1B,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,SAAS,KAAK,QAAQ,CAAC;aAClD,OAAO,EAAE;aACT,OAAO,EAAE,CAAC;IACnB,CAAC;CAAA;AACM,SAAe,qBAAqB,CAAC,QAAgB;;QACxD,6DAA6D;QAC7D,OAAO,MAAM,wEAAQ,CAAC,SAAS;aAC1B,KAAK,CAAC,WAAW,CAAC;aAClB,gBAAgB,CAAC,QAAQ,CAAC;aAC1B,OAAO,EAAE;aACT,KAAK,CAAC,EAAE,CAAC;aACT,OAAO,EAAE,CAAC;IACnB,CAAC;CAAA;AACM,SAAe,wBAAwB,CAC1C,QAAgB,EAChB,aAAqB;;QAErB,uFAAuF;QACvF,OAAO,MAAM,wEAAQ,CAAC,SAAS;aAC1B,KAAK,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC;aAC9B,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,kBAAkB,IAAI,aAAa,CAAC;aAC/D,OAAO,EAAE;aACT,OAAO,EAAE,CAAC;IACnB,CAAC;CAAA;AACM,SAAe,2BAA2B,CAC7C,QAAgB,EAChB,aAAqB;;QAErB,mFAAmF;QACnF,OAAO,MAAM,wEAAQ,CAAC,SAAS;aAC1B,KAAK,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC;aACjC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,qBAAqB,IAAI,aAAa,CAAC;aAClE,OAAO,EAAE;aACT,OAAO,EAAE,CAAC;IACnB,CAAC;CAAA;;;;;;;;;;;;;AClGD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACvB,UAAU,EAAE,KAAK;CACpB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IACxB,oEAAc,EAAE,CAAC;CACpB;AAED,2EAAwB,gBACJ,CAAC,0DAAU;KAC1B,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { ErrorPageComponent } from './pages/ErrorPage/ErrorPage.component';\r\nimport { MainPageComponent } from './pages/MainPage/MainPage.component';\r\n// @angular\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n// components\r\nimport { LoginPageComponent } from './pages/LoginPage/LoginPage.component';\r\nimport { TransfersPageComponent } from './pages/TransfersPage/TransfersPage.component';\r\nimport { RegisterPageComponent } from './pages/RegisterPage/RegisterPage.component';\r\nimport { AccountsPageComponent } from './pages/AccountsPage/AccountsPage.component';\r\nimport { AccountDetailPageComponent } from './pages/AccountDetailPage/AccountDetailPage.component';\r\nimport { SidebarComponent } from './components/Sidebar/Sidebar.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: SidebarComponent,\r\n        children: [\r\n            { path: '', pathMatch: 'full', redirectTo: 'main' },\r\n            { path: 'main', component: MainPageComponent },\r\n            { path: 'accounts', component: AccountsPageComponent },\r\n            { path: 'transfers', component: TransfersPageComponent },\r\n            {\r\n                path: 'account/:accountNumber',\r\n                component: AccountDetailPageComponent,\r\n            },\r\n            { path: 'error', component: ErrorPageComponent },\r\n        ],\r\n    },\r\n    { path: 'login', component: LoginPageComponent },\r\n    { path: 'register', component: RegisterPageComponent },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes), TranslateModule],\r\n    exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n\r\nexport const routingComponent = [\r\n    SidebarComponent,\r\n    MainPageComponent,\r\n    AccountDetailPageComponent,\r\n    AccountsPageComponent,\r\n    LoginPageComponent,\r\n    RegisterPageComponent,\r\n    TransfersPageComponent,\r\n];\r\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { SessionService } from './services/SessionService/SessionService.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n    title = 'bank-application';\r\n    constructor(\r\n        private router: Router,\r\n        private session: SessionService,\r\n        public translate: TranslateService\r\n    ) {\r\n        translate.addLangs(['tr', 'en']);\r\n        // this language will be used as a fallback when a translation isn't found in the current language\r\n        translate.setDefaultLang('tr');\r\n\r\n        // the lang to use, if the lang isn't available, it will use the current loader to get them\r\n        translate.use('tr');\r\n        if (!session.getToken()) {\r\n            // Eğer giriş yapan kullanıcı yoksa Login sayfasına yönlendirir.\r\n            this.router.navigateByUrl('/login');\r\n        }\r\n    }\r\n    changeLanguage(language: string) {\r\n        this.translate.use(language);\r\n    }\r\n}\r\n","<router-outlet></router-outlet>\r\n<app-Sidebar></app-Sidebar>\r\n","import { MyCurrencyPipe } from './pipes/myCurrency/myCurrency.pipe';\r\nimport { AbsoluteValuePipe } from './pipes/absoluteValue/absoluteValue.pipe';\r\nimport { AccountCardComponent } from './components/AccountCard/AccountCard.component';\r\nimport { SidebarComponent } from './components/Sidebar/Sidebar.component';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AppRoutingModule, routingComponent } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\r\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\n\r\n// AoT requires an exported function for factories\r\nexport function createTranslateLoader(http: HttpClient) {\r\n    return new TranslateHttpLoader(http, './assets/i18n/', '.json');\r\n}\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        SidebarComponent,\r\n        AccountCardComponent,\r\n        AbsoluteValuePipe,\r\n        MyCurrencyPipe,\r\n        routingComponent,\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        AppRoutingModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        CommonModule,\r\n        NgbModule,\r\n        HttpClientModule,\r\n        TranslateModule.forRoot({\r\n            defaultLanguage: 'tr',\r\n            loader: {\r\n                provide: TranslateLoader,\r\n                useFactory: createTranslateLoader,\r\n                deps: [HttpClient],\r\n            },\r\n        }),\r\n    ],\r\n    providers: [],\r\n    bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { Account } from './../../models/Account';\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SessionService } from 'src/app/services/SessionService/SessionService.service';\nimport {\n    AccountService,\n    userAccounts,\n    numberOfAccounts,\n    getAccountKey,\n} from 'src/app/services/AccountService/AccountService.service';\nimport { CurrencyConverterService } from 'src/app/services/CurrencyConverter/CurrencyConverter.service';\n\n@Component({\n    selector: 'app-AccountCard',\n    templateUrl: './AccountCard.component.html',\n    styleUrls: ['./AccountCard.component.css'],\n})\nexport class AccountCardComponent implements OnInit {\n    accounts: Account[]; // Kullanıcının Hesapları\n    numberOfAccounts: number; // Kullanıcının Hesap Adeti\n\n    username: string; // Giriş Yapan Kullanıcı\n\n    closeResult: string;\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private session: SessionService,\n        private accountService: AccountService,\n        private currencyService: CurrencyConverterService\n    ) {\n        if (!session.getToken()) {\n            // Eğer giriş yapan kullanıcı yoksa Login sayfasına yönlendirir.\n            this.router.navigateByUrl('/login');\n        } else {\n            this.getFirst(session.getToken());\n        }\n    }\n\n    async getFirst(username: string) {\n        this.username = this.session.getToken(); // Token'dan kullanıcı ismi alınıp \"username\" değişkenine kaydedilir.\n        await userAccounts(username).then(\n            // Kullanıcının hesapları \"accounts\" değişkenine kaydedilir.\n            (resolve) => (this.accounts = resolve)\n        );\n        await numberOfAccounts(username).then(\n            // Kullanıcının hesap adeti \"numberOfAccounts\" değişkenine kaydedilir.\n            (resolve) => (this.numberOfAccounts = resolve)\n        );\n    }\n    ngOnInit() {}\n\n    async deleteAccount(accountNumber: number) {\n        // Hesap Silme Fonksiyonu\n        let uniqueKey: number;\n        await getAccountKey(accountNumber).then((response) => {\n            // Öncelikle hesabın primary key'i alınır.\n            uniqueKey = response[0];\n            console.log(response);\n        });\n        this.accountService.deleteAccount(uniqueKey); // Alınan primary key ile hesap silinir.\n    }\n\n    gotoDetails(accountNumber: any) {\n        // Detay Sayfasına Yönlendirme Fonksiyonu\n        this.router.navigate(['/account/', accountNumber]);\n    }\n}\n","<div class=\"row card-group\" *ngIf=\"numberOfAccounts; else elseBlock\">\r\n    <div class=\"col-4\" *ngFor=\"let account of accounts\">\r\n        <div class=\"card\">\r\n            <div style=\"margin: 20px;\">\r\n                <h5 class=\"card-title\">\r\n                    {{ account.accountName }} ({{ account.currency }})\r\n                </h5>\r\n                <p class=\"card-text\">\r\n                    {{ \"account.accountName\" | translate }}\r\n                    {{ account.accountNumber }}\r\n                </p>\r\n                <p class=\"card-text\">\r\n                    {{ \"account.rate\" | translate }}: %{{ account.rate }}\r\n                </p>\r\n                <p class=\"card-text\">\r\n                    {{ \"account.amount\" | translate }}:\r\n                    {{ account.amount | myCurrency }}\r\n                </p>\r\n            </div>\r\n\r\n            <button\r\n                type=\"button\"\r\n                class=\"btn btn-danger\"\r\n                (click)=\"deleteAccount(account.accountNumber)\"\r\n                *ngIf=\"account.amount == 0\"\r\n            >\r\n                {{ \"account.deleteAccount\" | translate }}\r\n            </button>\r\n            <button\r\n                type=\"button\"\r\n                class=\"btn btn-primary\"\r\n                (click)=\"gotoDetails(account.accountNumber)\"\r\n            >\r\n                {{ \"account.details\" | translate }}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #elseBlock>\r\n    <h4>{{ \"account.noAccounts\" | translate }}</h4>\r\n</ng-template>\r\n","import { TranslateService } from '@ngx-translate/core';\r\nimport { SessionService } from 'src/app/services/SessionService/SessionService.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    AccountService,\r\n    numberOfAccounts,\r\n    getAccount,\r\n} from 'src/app/services/AccountService/AccountService.service';\r\n\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n    selector: 'app-Sidebar',\r\n    templateUrl: './Sidebar.component.html',\r\n    styleUrls: ['./Sidebar.component.css'],\r\n})\r\nexport class SidebarComponent implements OnInit {\r\n    username: string; // Giriş Yapan Kullanıcı\r\n    numberOfAccounts: number; // Kullanıcının Hesap Adeti\r\n\r\n    closeResult: string;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private session: SessionService,\r\n        private accountService: AccountService,\r\n        private modalService: NgbModal,\r\n        private translate: TranslateService\r\n    ) {\r\n        if (!session.getToken()) {\r\n            // Eğer giriş yapan kullanıcı yoksa Login sayfasına yönlendirilir.\r\n            this.router.navigateByUrl('/login');\r\n        } else {\r\n            this.getFirst(session.getToken());\r\n        }\r\n    }\r\n\r\n    async getFirst(username: string) {\r\n        this.username = this.session.getToken(); // Token'dan kullanıcı ismi alınıp \"username\" değişkenine kaydedilir.\r\n        await numberOfAccounts(username).then(\r\n            // Kullanıcının hesap adeti \"numberOfAccounts\" değişkenine kaydedilir.\r\n            (resolve) => (this.numberOfAccounts = resolve)\r\n        );\r\n    }\r\n\r\n    ngOnInit() {}\r\n\r\n    openModal(content: any) {\r\n        // Oturumu Kapat Modelini Açma Fonksiyonu\r\n        this.modalService\r\n            .open(content, {\r\n                ariaLabelledBy: 'modal-basic-title',\r\n                centered: true,\r\n            })\r\n            .result.then((result) => {\r\n                this.closeResult = `Closed with: ${result}`;\r\n            });\r\n    }\r\n\r\n    changeLanguage(language: string) {\r\n        this.translate.use(language);\r\n    }\r\n    logOut() {\r\n        // Oturumu Kapatma Fonksiyonu\r\n        this.session.logOut();\r\n    }\r\n}\r\n","<div class=\"sidebar\">\r\n    <h3>{{ username }}</h3>\r\n    <hr />\r\n    <a routerLink=\"/main\" routerLinkActive=\"selected\">\r\n        {{ \"sidebar.main\" | translate }}\r\n    </a>\r\n    <hr />\r\n    <a routerLink=\"/accounts\" routerLinkActive=\"selected\">\r\n        {{ \"sidebar.accounts\" | translate }} ({{ numberOfAccounts }})\r\n    </a>\r\n    <hr />\r\n    <a routerLink=\"/transfers\" routerLinkActive=\"selected\">\r\n        {{ \"sidebar.transfers\" | translate }}\r\n    </a>\r\n    <hr />\r\n    <div class=\"btn-group\" role=\"group\">\r\n        <button class=\"btn btn-danger btn-lg\" (click)=\"openModal(logOutModal)\">\r\n            {{ \"sidebar.logout\" | translate }}\r\n        </button>\r\n    </div>\r\n\r\n    <hr />\r\n    <div class=\"btn-group\" role=\"group\">\r\n        <button\r\n            type=\"button\"\r\n            class=\"btn btn-secondary\"\r\n            (click)=\"changeLanguage('tr')\"\r\n        >\r\n            TÜRKÇE\r\n        </button>\r\n        <button\r\n            type=\"button\"\r\n            class=\"btn btn-secondary\"\r\n            (click)=\"changeLanguage('en')\"\r\n        >\r\n            ENGLISH\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #logOutModal let-modal>\r\n    <div class=\"modal-header\">\r\n        <h4 class=\"modal-title\" id=\"modal-basic-title\">\r\n            {{ \"sidebar.modal.title\" | translate }}\r\n        </h4>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button class=\"btn btn-success btn-lg\" (click)=\"logOut()\">\r\n            {{ \"sidebar.modal.yes\" | translate }}\r\n        </button>\r\n        <button class=\"btn btn-danger btn-lg\" (click)=\"modal.close()\">\r\n            {{ \"sidebar.modal.no\" | translate }}\r\n        </button>\r\n    </div>\r\n</ng-template>\r\n\r\n<router-outlet></router-outlet>\r\n","export class Account {\n    customerName: string;\n    accountName: string;\n    accountNumber: number;\n    amount: number;\n    currency: string;\n    rate: number;\n    date: string;\n}\n","export class Customer {\n    username: string;\n    password: string;\n}\n","export class Transfer {\n    // One-to-Many İlişki Kuramadığımdan transfer yapan customer bilgilerini de tutuyorum.\n    transferType: string;\n    cSendName: string;\n    cSendAccountName: string;\n    cSendAccountNumber: number;\n    cSendAccountAmount: number;\n    cSendAccountCurrency: string;\n    cReceiveName: string;\n    cReceiveAccountName: string;\n    cReceiveAccountNumber: number;\n    cReceiveAccountAmount: number;\n    amount: number;\n    description: string;\n    date: string;\n}\n","import { AccountService } from './../../services/AccountService/AccountService.service';\nimport { Transfer } from './../../models/Transfer';\nimport {\n    userAccountSendTransfers,\n    userAccountReceiveTransfers,\n} from './../../services/TransferService/TransferService.service';\nimport { SessionService } from 'src/app/services/SessionService/SessionService.service';\nimport { getAccount } from 'src/app/services/AccountService/AccountService.service';\nimport { Account } from './../../models/Account';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-AccountDetailPage',\n    templateUrl: './AccountDetailPage.component.html',\n    styleUrls: ['./AccountDetailPage.component.css'],\n})\nexport class AccountDetailPageComponent implements OnInit {\n    account: Account; // Hesap Bilgisi\n    accountNumber: number; // Hesap Numarası\n    username: string; // Giriş Yapan Kullanıcı\n\n    accountSendTransfers: Transfer[]; // Gönderilen Transferler\n    accountReceiveTransfers: Transfer[]; // Alınan Transferler\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private session: SessionService,\n        private accountService: AccountService\n    ) {\n        if (!session.getToken()) {\n            // Eğer giriş yapan kullanıcı yoksa Login sayfasına yönlendirilir.\n            this.router.navigateByUrl('/login');\n        } else {\n            this.getFirst(session.getToken());\n        }\n    }\n    \n    async getFirst(username: string) {\n        this.username = this.session.getToken(); // Token'dan kullanıcı ismi alınıp \"username\" değişkenine kaydedilir.\n        await getAccount(\n            // Hesap bilgisi url'den gelen accountNumber değeri ile \"account\" değişkenine kaydedilir.\n            username,\n            this.route.snapshot.params.accountNumber\n        ).then((resolve) => {\n            this.account = resolve[0];\n        });\n        await userAccountSendTransfers(\n            // Kullanıcının gönderdiği transferler \"accountSendTransfers\" değişkenine kaydedilir.\n            username,\n            this.route.snapshot.params.accountNumber\n        ).then((response) => {\n            this.accountSendTransfers = response;\n        });\n        await userAccountReceiveTransfers(\n            // Kullanıcının aldığı transferler \"accountReceiveTransfers\" değişkenine kaydedilir.\n            username,\n            this.route.snapshot.params.accountNumber\n        ).then((response) => {\n            this.accountReceiveTransfers = response;\n        });\n    }\n\n    ngOnInit() {}\n}\n","<app-Sidebar></app-Sidebar>\r\n<div class=\"main\">\r\n    <div class=\"container-sm\">\r\n        <h2>{{ \"account.accountDetail\" | translate }}</h2>\r\n        <hr />\r\n        <div class=\"row\">\r\n            <div class=\"col-3\">\r\n                <h5>\r\n                    {{ \"account.accountName\" | translate }}:\r\n                    <span>\r\n                        {{ account.accountName }} ({{ account.currency }})\r\n                    </span>\r\n                </h5>\r\n            </div>\r\n            <div class=\"col-3\">\r\n                <h5>\r\n                    {{ \"account.accountNumber\" | translate }}:\r\n                    <span>{{ account.accountNumber }}</span>\r\n                </h5>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <h5>\r\n                    {{ \"account.balance\" | translate }}:\r\n                    <span>{{ account.amount | myCurrency }}</span>\r\n                </h5>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <h5>\r\n                    {{ \"account.rate\" | translate }}:\r\n                    <span>%{{ account.rate }}</span>\r\n                </h5>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <h5 style=\"color: tomato;\">\r\n                    <span style=\"color: darkgrey;\">\r\n                        {{ \"account.date\" | translate }}:\r\n                    </span>\r\n                    {{ account.date }}\r\n                </h5>\r\n            </div>\r\n        </div>\r\n        <br />\r\n        <h3>{{ \"account.accountActions\" | translate }}</h3>\r\n        <table class=\"table table-bordered\">\r\n            <thead class=\"thead-dark\">\r\n                <tr>\r\n                    <th>{{ \"transfer.receiveAccountName\" | translate }}</th>\r\n                    <th>{{ \"account.amount\" | translate }}</th>\r\n                    <th>{{ \"transfer.description\" | translate }}</th>\r\n                    <th>{{ \"account.balance\" | translate }}</th>\r\n                    <th>{{ \"account.date\" | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr *ngFor=\"let transfer of accountSendTransfers\">\r\n                <td *ngIf=\"transfer.transferType === 'Havale'\">\r\n                    {{ transfer.cReceiveAccountName }}\r\n                </td>\r\n                <td *ngIf=\"transfer.transferType === 'Virman'\">\r\n                    {{ transfer.cReceiveAccountNumber }}\r\n                </td>\r\n                <td>\r\n                    {{ transfer.amount | myCurrency }}\r\n                    {{ transfer.cSendAccountCurrency }}\r\n                </td>\r\n                <td>{{ transfer.description }}</td>\r\n                <td>{{ transfer.cSendAccountAmount | myCurrency }}</td>\r\n                <td>{{ transfer.date }}</td>\r\n            </tr>\r\n            <tr *ngFor=\"let transfer of accountReceiveTransfers\">\r\n                <td *ngIf=\"transfer.transferType === 'Havale'\">\r\n                    {{ transfer.cReceiveAccountName }}\r\n                </td>\r\n                <td *ngIf=\"transfer.transferType === 'Virman'\">\r\n                    {{ transfer.cReceiveAccountNumber }}\r\n                </td>\r\n                <td>\r\n                    {{ transfer.amount | absoluteValue | myCurrency }}\r\n                    {{ transfer.cSendAccountCurrency }}\r\n                </td>\r\n                <td>{{ transfer.description }}</td>\r\n                <td>{{ transfer.cReceiveAccountAmount | myCurrency }}</td>\r\n                <td>{{ transfer.date }}</td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n</div>\r\n","import { CurrencyConverterService } from './../../services/CurrencyConverter/CurrencyConverter.service';\nimport { Account } from './../../models/Account';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SessionService } from 'src/app/services/SessionService/SessionService.service';\n\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { formatDate } from '@angular/common';\nimport {\n    getAccount,\n    userAccounts,\n    numberOfAccounts,\n    getAccountKey,\n    AccountService,\n} from '../../services/AccountService/AccountService.service';\n\n@Component({\n    selector: 'app-AccountsPage',\n    templateUrl: './AccountsPage.component.html',\n    styleUrls: ['./AccountsPage.component.css'],\n})\nexport class AccountsPageComponent implements OnInit {\n    accountForm: FormGroup; // Hesap Ekleme Formu\n\n    accounts: Account[]; // Kullanıcın Hesapları\n    numberOfAccounts: number; // Kullanıcının Hesap Adeti\n    newAccount = new Account(); // Açılacak Yeni Hesap\n    firstAccount: boolean = false; // Açılacak Hesabın İlk Hesap Olup Olmadığını Tutan Değişken\n    otherAccount: Account; // Açılan Hesaba Para Aktaracak Diğer Hesap\n\n    username: string; // Giriş Yapan Kullanıcı\n    rate: number = 15; // Sabit Faiz Oranı\n\n    closeResult: string;\n    now = formatDate(new Date(), 'dd/MM/yyyy', 'en'); // Kayıt Tarihi İçin Tutulan Değişken\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private session: SessionService,\n        private accountService: AccountService,\n        private currencyService: CurrencyConverterService,\n        private modalService: NgbModal\n    ) {\n        if (!session.getToken()) {\n            // Eğer giriş yapan kullanıcı yoksa Login sayfasına yönlendirir.\n            this.router.navigateByUrl('/login');\n        } else {\n            this.getFirst(session.getToken());\n        }\n    }\n\n    async getFirst(username: string) {\n        this.username = this.session.getToken(); // Token'dan kullanıcı ismi alınıp \"username\" değişkenine kaydedilir.\n        await userAccounts(username).then(\n            // Kullanıcının hesapları \"accounts\" değişkenine kaydedilir.\n            (resolve) => (this.accounts = resolve)\n        );\n        await numberOfAccounts(username).then(\n            // Kullanıcının hesap adeti \"numberOfAccounts\" değişkenine kaydedilir.\n            (resolve) => (this.numberOfAccounts = resolve)\n        );\n    }\n\n    ngOnInit() {\n        this.accountForm = this.formBuilder.group({\n            // Form İle İlgili Validasyonları Belirleme\n            accountName: ['', Validators.required],\n            amount: ['10000', [Validators.required, Validators.min(1)]],\n            currency: ['TL', Validators.required],\n            otherAmount: [[]],\n        });\n    }\n\n    /** Validasyon için form değerlerine ulaşmayı sağlayan get metodları */\n    get accountName() {\n        return this.accountForm.get('accountName');\n    }\n    get amount() {\n        return this.accountForm.get('amount');\n    }\n    get currency() {\n        return this.accountForm.get('currency');\n    }\n    get otherAmount() {\n        return this.accountForm.get('otherAmount');\n    }\n\n    open(content: any) {\n        // Hesap Ekleme Modal'ını Açma Fonksiyonu\n        this.modalService\n            .open(content, { ariaLabelledBy: 'modal-basic-title' })\n            .result.then((result) => {\n                this.closeResult = `Closed with: ${result}`;\n            });\n    }\n\n    async onSubmit() {\n        // Hesap Ekleme Fonksiyonu\n        this.newAccount = this.accountForm.value;\n\n        // Form'da validasyon hatası varsa geri döner.\n        if (this.accountForm.invalid) {\n            alert('Zorunlu Alanları Doldurun!');\n            return;\n        }\n        if (this.numberOfAccounts !== 0) {\n            // Kullanıcının ilk hesabı açıp açmadığını kontrol etme\n            await getAccount(this.username, this.otherAmount.value).then(\n                // Hesaba yüklenecek paranın çekileceği hesap bilgisi\n                (response) => {\n                    this.otherAccount = response[0];\n                }\n            );\n\n            let convertMoney: number = this.currencyService.convertForAddAccount(\n                // Döviz Kuru'na göre para dönüştürme işlemleri\n                this.otherAccount.currency,\n                this.newAccount.currency,\n                this.newAccount.amount\n            );\n\n            if (convertMoney > this.otherAccount.amount) {\n                // Dönüştürülen para çekilecek hesaptaki paradan fazla ise\n                alert('Paranın Çekileceği Hesabınızda Yeterli Bakiye Yok!');\n                return;\n            } else {\n                // Yeterli bakiye varsa\n                let uniqueKey: number;\n                await getAccountKey(this.otherAccount.accountNumber).then(\n                    (response) => {\n                        uniqueKey = response[0];\n                    }\n                );\n\n                this.accountService.updateAccount(\n                    // Diğer hesaptan yatırılacak para miktarı düşülür.\n                    uniqueKey,\n                    this.otherAccount.amount - convertMoney\n                );\n            }\n        }\n\n        let accountNumber = Math.floor(\n            // Rastgele bir hesap numarası\n            Math.random() * (999999 - 100000 + 1) + 100000\n        );\n\n        this.accountService.addAccount(\n            // Hesap veritabanına eklenir.\n            this.username,\n            this.newAccount.accountName,\n            accountNumber,\n            this.newAccount.amount,\n            this.newAccount.currency,\n            this.rate,\n            this.now\n        );\n    }\n\n    gotoDetails(accountNumber: any) {\n        // Detay Sayfasına Yönlendirme Fonksiyonu\n        this.router.navigate(['/account/', accountNumber]);\n    }\n}\n","<div class=\"main\">\r\n    <div class=\"container-sm\">\r\n        <div class=\"row\">\r\n            <div class=\"col-10\">\r\n                <h2>\r\n                    {{ \"sidebar.accounts\" | translate }}\r\n                </h2>\r\n\r\n                <div\r\n                    class=\"row card-group\"\r\n                    *ngIf=\"numberOfAccounts; else elseBlock\"\r\n                >\r\n                    <table class=\"table table-bordered\">\r\n                        <thead class=\"thead-dark\">\r\n                            <tr>\r\n                                <th>{{ \"account.accountName\" | translate }}</th>\r\n                                <th>\r\n                                    {{ \"account.accountNumber\" | translate }}\r\n                                </th>\r\n                                <th>\r\n                                    {{ \"account.currency.title\" | translate }}\r\n                                </th>\r\n                                <th>{{ \"account.amount\" | translate }}</th>\r\n                                <th>{{ \"account.date\" | translate }}</th>\r\n                                <th>{{ \"account.action\" | translate }}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tr *ngFor=\"let account of accounts\">\r\n                            <td>{{ account.accountName }}</td>\r\n                            <td>{{ account.accountNumber }}</td>\r\n                            <td>{{ account.currency }}</td>\r\n                            <td>{{ account.amount | myCurrency }}</td>\r\n                            <td>{{ account.date }}</td>\r\n                            <td>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    class=\"btn btn-primary\"\r\n                                    (click)=\"gotoDetails(account.accountNumber)\"\r\n                                >\r\n                                    {{ \"account.details\" | translate }}\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                <ng-template #elseBlock>\r\n                    <h4>\r\n                        {{ \"account.noAccounts\" | translate }}\r\n                    </h4>\r\n                </ng-template>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <button\r\n                    class=\"btn btn-lg btn-primary\"\r\n                    (click)=\"open(addAccount)\"\r\n                >\r\n                    {{ \"account.modal.addAccount\" | translate }}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #addAccount let-modal>\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\" id=\"modal-basic-title\">\r\n                {{ \"account.modal.addAccount\" | translate }}\r\n            </h4>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <form [formGroup]=\"accountForm\" (ngSubmit)=\"onSubmit()\">\r\n                <label for=\"accountName\"\r\n                    >{{ \"account.accountName\" | translate }} *</label\r\n                >\r\n                <input\r\n                    type=\"text\"\r\n                    formControlName=\"accountName\"\r\n                    class=\"form-control\"\r\n                    required\r\n                />\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    *ngIf=\"\r\n                        accountName.errors &&\r\n                        (accountName.dirty || accountName.touched)\r\n                    \"\r\n                >\r\n                    <p *ngIf=\"accountName.errors.required\">\r\n                        {{\r\n                            \"account.modal.errors.accountNameRequired\"\r\n                                | translate\r\n                        }}\r\n                    </p>\r\n                </div>\r\n                <div\r\n                    class=\"form-group\"\r\n                    *ngIf=\"numberOfAccounts != 0; else elseblock\"\r\n                >\r\n                    <label for=\"amount\">\r\n                        {{ \"account.amount\" | translate }} *\r\n                    </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        formControlName=\"amount\"\r\n                        class=\"form-control\"\r\n                        min=\"1\"\r\n                    />\r\n                    <div\r\n                        class=\"alert alert-danger\"\r\n                        *ngIf=\"\r\n                            amount.errors && (amount.dirty || amount.touched)\r\n                        \"\r\n                    >\r\n                        <p *ngIf=\"amount.errors.required\">\r\n                            {{\r\n                                \"account.modal.errors.amountRequired\"\r\n                                    | translate\r\n                            }}\r\n                        </p>\r\n                        <p *ngIf=\"amount.errors.min\">\r\n                            {{ \"account.modal.errors.amountMin\" | translate }}\r\n                        </p>\r\n                    </div>\r\n                    <br />\r\n                    <label for=\"otherAmount\"\r\n                        >{{ \"account.withdrawAccount\" | translate }} *\r\n                    </label>\r\n                    <select\r\n                        class=\"custom-select custom-select-lg mb-3\"\r\n                        formControlName=\"otherAmount\"\r\n                    >\r\n                        <option\r\n                            *ngFor=\"let account of accounts\"\r\n                            value=\"{{ account.accountNumber }}\"\r\n                        >\r\n                            {{ \"account.accountNumber\" | translate }}\r\n                            {{ account.accountNumber }},\r\n                            {{ \"account.accountNumber\" | translate }}\r\n                            {{ account.amount }},\r\n                            {{ \"account.currency.title\" | translate }}\r\n                            {{ account.currency }}\r\n                        </option>\r\n                    </select>\r\n                    <div\r\n                        class=\"alert alert-danger\"\r\n                        *ngIf=\"\r\n                            otherAmount.errors &&\r\n                            (otherAmount.dirty || otherAmount.touched)\r\n                        \"\r\n                    >\r\n                        <p *ngIf=\"otherAmount.errors.required\">\r\n                            {{\r\n                                \"account.modal.errors.withdrawAccountRequired\"\r\n                                    | translate\r\n                            }}\r\n                        </p>\r\n                    </div>\r\n                    <div class=\"alert alert-info\">\r\n                        {{\r\n                            \"account.modal.errors.currencyConvertion\"\r\n                                | translate\r\n                        }}\r\n                    </div>\r\n                    <label for=\"currency\">\r\n                        {{ \"account.currency.title\" | translate }} *\r\n                    </label>\r\n                    <select\r\n                        class=\"custom-select custom-select-lg mb-3\"\r\n                        formControlName=\"currency\"\r\n                    >\r\n                        <option value=\"TL\">{{\r\n                            \"account.currency.turkishLira\" | translate\r\n                        }}</option>\r\n                        <option value=\"$\">{{\r\n                            \"account.currency.dolar\" | translate\r\n                        }}</option>\r\n                        <option value=\"€\">{{\r\n                            \"account.currency.euro\" | translate\r\n                        }}</option>\r\n                        <option value=\"Altın\">{{\r\n                            \"account.currency.gold\" | translate\r\n                        }}</option>\r\n                    </select>\r\n                    <div\r\n                        class=\"alert alert-danger\"\r\n                        *ngIf=\"\r\n                            currency.errors &&\r\n                            (currency.dirty || currency.touched)\r\n                        \"\r\n                    >\r\n                        <p *ngIf=\"currency.errors.required\">\r\n                            {{\r\n                                \"account.modal.errors.currencyRequired\"\r\n                                    | translate\r\n                            }}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <ng-template #elseblock>\r\n                    <label for=\"amount\">\r\n                        {{ \"account.amount\" | translate }}\r\n                    </label>\r\n                    <div class=\"alert alert-info\" role=\"alert\">\r\n                        {{ \"account.modal.errors.firstAccount\" | translate }}\r\n                    </div>\r\n                    <label for=\"amount\">\r\n                        {{ \"account.currency.title\" | translate }}\r\n                    </label>\r\n                    <div class=\"alert alert-info\" role=\"alert\">\r\n                        TL\r\n                    </div>\r\n                </ng-template>\r\n                <div class=\"form-group\">\r\n                    <button class=\"btn btn-primary btn-lg btn-block\">\r\n                        {{ \"account.modal.addAccount\" | translate }}\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </ng-template>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-ErrorPage',\r\n  templateUrl: './ErrorPage.component.html',\r\n  styleUrls: ['./ErrorPage.component.css']\r\n})\r\nexport class ErrorPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<div class=\"main\">\r\n<div class=\"container\">\r\n    <div class=\"row\">\r\n        <img class=\"mx-auto d-block\" src=\"../../../assets/img/404.jpg\" />\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"mx-auto d-block\">\r\n            <a class=\"btn btn-primary\" href=\"/main\" role=\"button\">\r\n                GO TO HOME PAGE\r\n            </a>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { SessionService } from './../../services/SessionService/SessionService.service';\r\nimport { Customer } from './../../models/Customer';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-LoginPage',\r\n    templateUrl: './LoginPage.component.html',\r\n    styleUrls: ['./LoginPage.component.css'],\r\n})\r\nexport class LoginPageComponent implements OnInit {\r\n    loginForm: FormGroup; // Kullanıcı Giriş Formu\r\n    customer = new Customer(); // Form İçin Kullanıcı Objesi\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private session: SessionService\r\n    ) {\r\n        if (session.getToken()) {\r\n            // Eğer giriş yapan kullanıcı yoksa Login sayfasına yönlendirir.\r\n            this.router.navigateByUrl('/main');\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.loginForm = this.formBuilder.group({\r\n            // Form İle İlgili Validasyonları Belirleme\r\n            username: ['', Validators.required],\r\n            password: ['', Validators.required],\r\n        });\r\n    }\r\n\r\n    /** Validasyon için form değerlerine ulaşmayı sağlayan get metodları */\r\n    get username() {\r\n        return this.loginForm.get('username');\r\n    }\r\n    get password() {\r\n        return this.loginForm.get('password');\r\n    }\r\n\r\n    onSubmit() {\r\n        // Oturum Açma Fonkiyonu\r\n        this.customer = this.loginForm.value;\r\n\r\n        // Eğer form'da herhangi bir validasyon hatası çıkarsa işlem yapılmaz!\r\n        if (this.loginForm.invalid) {\r\n            alert('Zorunlu Alanları Doldurun!');\r\n            return;\r\n        }\r\n\r\n        this.session.login(this.customer.username, this.customer.password);\r\n    }\r\n}\r\n","<div class=\"container-sm\">\r\n    <div class=\"login-container\">\r\n        <h2>{{ \"login.login\" | translate }}</h2>\r\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n            <label for=\"username\">{{ \"login.username\" | translate }}</label>\r\n            <input\r\n                type=\"text\"\r\n                formControlName=\"username\"\r\n                class=\"form-control\"\r\n                required\r\n            />\r\n            <div\r\n                class=\"alert alert-danger\"\r\n                *ngIf=\"username.errors && (username.dirty || username.touched)\"\r\n            >\r\n                <p *ngIf=\"username.errors.required\">\r\n                    {{ \"login.errors.usernameRequired\" | translate }}\r\n                </p>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"password\">{{ \"login.password\" | translate }}</label>\r\n                <input\r\n                    type=\"password\"\r\n                    formControlName=\"password\"\r\n                    class=\"form-control\"\r\n                    required\r\n                />\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    *ngIf=\"\r\n                        password.errors && (password.dirty || password.touched)\r\n                    \"\r\n                >\r\n                    <p *ngIf=\"password.errors.required\">\r\n                        {{ \"login.errors.passwordRequired\" | translate }}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <button class=\"btn btn-primary btn-lg btn-block\">\r\n                    {{ \"login.login\" | translate }}\r\n                </button>\r\n                <a routerLink=\"/register\" class=\"btn btn-link btn-lg btn-block\">\r\n                    {{ \"login.register\" | translate }}\r\n                </a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n","import { Transfer } from './../../models/Transfer';\nimport { SessionService } from 'src/app/services/SessionService/SessionService.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CurrencyConverterService } from 'src/app/services/CurrencyConverter/CurrencyConverter.service';\nimport {\n    userSendTransfers,\n    userReceiveTransfers,\n} from 'src/app/services/TransferService/TransferService.service';\n\n@Component({\n    selector: 'app-MainPage',\n    templateUrl: './MainPage.component.html',\n    styleUrls: ['./MainPage.component.css'],\n})\nexport class MainPageComponent implements OnInit {\n    username: string; // Giriş Yapan Kullanıcı\n    sendTransfers: Transfer[]; // Gönderilen Transferler\n    receiveTransfers: Transfer[]; // Alınan Transferler\n\n    constructor(private router: Router, private session: SessionService) {\n        if (!session.getToken()) {\n            // Eğer giriş yapan kullanıcı yoksa Login sayfasına yönlendirir.\n            this.router.navigateByUrl('/login');\n        } else {\n            this.getFirst(session.getToken());\n        }\n    }\n\n    async getFirst(username: string) {\n        this.username = this.session.getToken(); // Token'dan kullanıcı ismi alınıp \"username\" değişkenine kaydedilir.\n        await userSendTransfers(username).then(\n            // Kullanıcının gönderdiği transferler \"accountSendTransfers\" değişkenine kaydedilir.\n            (resolve) => (this.sendTransfers = resolve)\n        );\n        await userReceiveTransfers(username).then(\n            // Kullanıcının aldığı transferler \"accountReceiveTransfers\" değişkenine kaydedilir.\n            (resolve) => (this.receiveTransfers = resolve)\n        );\n    }\n\n    ngOnInit() {}\n}\n","<div class=\"main\">\r\n    <div class=\"container-sm\">\r\n        <div class=\"row\">\r\n            <div class=\"col-10\">\r\n                <h2>{{ \"sidebar.accounts\" | translate }}</h2>\r\n                <hr />\r\n                <app-AccountCard></app-AccountCard>\r\n                <hr />\r\n                <h2>{{ \"transfer.lastActivities\" | translate }}</h2>\r\n                <hr />\r\n                <div\r\n                    *ngIf=\"\r\n                        sendTransfers.length !== 0 ||\r\n                            receiveTransfers.length !== 0;\r\n                        else noTransfer\r\n                    \"\r\n                >\r\n                    <table class=\"table table-bordered\">\r\n                        <thead class=\"thead-dark\">\r\n                            <tr>\r\n                                <th>\r\n                                    {{\r\n                                        \"transfer.sendAccountNumber\" | translate\r\n                                    }}\r\n                                </th>\r\n                                <th>\r\n                                    {{\r\n                                        \"transfer.receiveAccountNumber\"\r\n                                            | translate\r\n                                    }}\r\n                                </th>\r\n                                <th>{{ \"account.amount\" | translate }}</th>\r\n                                <th>\r\n                                    {{ \"transfer.description\" | translate }}\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tr *ngFor=\"let transfer of sendTransfers\">\r\n                            <td>{{ transfer.cSendAccountNumber }}</td>\r\n                            <td>{{ transfer.cReceiveAccountNumber }}</td>\r\n                            <td>\r\n                                {{ transfer.amount | myCurrency }}\r\n                                {{ transfer.cSendAccountCurrency }}\r\n                            </td>\r\n                            <td>{{ transfer.description }}</td>\r\n                        </tr>\r\n                        <tr *ngFor=\"let transfer of receiveTransfers\">\r\n                            <td>{{ transfer.cSendAccountNumber }}</td>\r\n                            <td>{{ transfer.cReceiveAccountNumber }}</td>\r\n                            <td>\r\n                                {{\r\n                                    transfer.amount | absoluteValue | myCurrency\r\n                                }}\r\n                                {{ transfer.cSendAccountCurrency }}\r\n                            </td>\r\n                            <td>{{ transfer.description }}</td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                <ng-template #noTransfer>\r\n                    <h4>{{ \"transfer.noActivities\" | translate }}</h4>\r\n                </ng-template>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <h2>{{ \"exchangeRate\" | translate }}</h2>\r\n                <h5>{{ \"account.currency.dolar\" | translate }}: 6 TL</h5>\r\n                <h5>{{ \"account.currency.euro\" | translate }}: 7 TL</h5>\r\n                <h5>{{ \"account.currency.gold\" | translate }}: 390 TL</h5>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Customer } from './../../models/Customer';\nimport { SessionService } from './../../services/SessionService/SessionService.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'app-RegisterPage',\n    templateUrl: './RegisterPage.component.html',\n    styleUrls: ['./RegisterPage.component.css'],\n})\nexport class RegisterPageComponent implements OnInit {\n    registerForm: FormGroup; // Kullanıcı Kayıt Formu\n    customer = new Customer(); // Form İçin Kullanıcı Objesi\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private session: SessionService\n    ) {\n        if (session.getToken()) {\n            // Eğer giriş yapan kullanıcı yoksa Login sayfasına yönlendirir.\n            this.router.navigateByUrl('/main');\n        }\n    }\n\n    ngOnInit() {\n        this.registerForm = this.formBuilder.group({\n            // Form İle İlgili Validasyonları Belirleme\n            username: ['', Validators.required],\n            password: ['', [Validators.required, Validators.minLength(6)]],\n        });\n    }\n\n    /** Validasyon için form değerlerine ulaşmayı sağlayan get metodları */\n    get username() {\n        return this.registerForm.get('username');\n    }\n    get password() {\n        return this.registerForm.get('password');\n    }\n\n    onSubmit() {\n        // Kullanıcı Kaydı Fonksiyonu\n        this.customer = this.registerForm.value;\n\n        // Eğer form'da herhangi bir validasyon hatası çıkarsa işlem yapılmaz!\n        if (this.registerForm.invalid) {\n            alert('Zorunlu Alanları Doldurun!');\n            return;\n        }\n\n        this.session.register(this.customer.username, this.customer.password);\n    }\n}\n","<div class=\"container-sm\">\r\n    <div class=\"login-container\">\r\n        <h2>{{ \"login.register\" | translate }}</h2>\r\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n            <label for=\"username\">{{ \"login.username\" | translate }}</label>\r\n            <input\r\n                type=\"text\"\r\n                formControlName=\"username\"\r\n                class=\"form-control\"\r\n                required\r\n            />\r\n            <div\r\n                class=\"alert alert-danger\"\r\n                *ngIf=\"username.errors && (username.dirty || username.touched)\"\r\n            >\r\n                <p *ngIf=\"username.errors.required\">\r\n                    {{ \"login.errors.usernameRequired\" | translate }}\r\n                </p>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"password\">{{ \"login.password\" | translate }}</label>\r\n                <input\r\n                    type=\"password\"\r\n                    formControlName=\"password\"\r\n                    class=\"form-control\"\r\n                    required\r\n                    minlength=\"6\"\r\n                />\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    *ngIf=\"\r\n                        password.errors && (password.dirty || password.touched)\r\n                    \"\r\n                >\r\n                    <p *ngIf=\"password.errors.required\">\r\n                        {{ \"login.errors.passwordRequired\" | translate }}\r\n                    </p>\r\n                    <p *ngIf=\"password.errors.minlength\">\r\n                        {{ \"login.errors.passwordMin\" | translate }}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <button class=\"btn btn-primary btn-lg btn-block\">\r\n                    {{ \"login.register\" | translate }}\r\n                </button>\r\n                <a routerLink=\"/login\" class=\"btn btn-link btn-lg btn-block\">\r\n                    {{ \"login.login\" | translate }}\r\n                </a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n","import {\n    getAccount,\n    getAccountKey,\n    AccountService,\n    userAccounts,\n    getAccountAnotherUser,\n} from 'src/app/services/AccountService/AccountService.service';\nimport { CurrencyConverterService } from './../../services/CurrencyConverter/CurrencyConverter.service';\nimport { Account } from './../../models/Account';\nimport {\n    TransferService,\n    userSendTransfers,\n    userReceiveTransfers,\n} from './../../services/TransferService/TransferService.service';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { Transfer } from './../../models/Transfer';\nimport { Component, OnInit } from '@angular/core';\nimport { SessionService } from 'src/app/services/SessionService/SessionService.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { formatDate } from '@angular/common';\n\n@Component({\n    selector: 'app-TransfersPage',\n    templateUrl: './TransfersPage.component.html',\n    styleUrls: ['./TransfersPage.component.css'],\n})\nexport class TransfersPageComponent implements OnInit {\n    transferForm: FormGroup; // Transfer Ekleme Formu\n\n    sendTransfers: Transfer[]; // Gönderilen Transferler\n    receiveTransfers: Transfer[]; // Alınan Transferler\n    newTransfer = new Transfer(); // Form İçin Transfer Objesi Tanımlama\n\n    accounts: Account[]; // Transfer Eklemek İçin Gerekli Gönderen Kullanıcı Hesap Bilgileri\n    userAnotherAccounts: Account[]; // Virman Eklemek İçin Gerekli Alıcı Kullanıcı Hesap Bilgileri\n\n    username: string; // Giriş Yapan Kullanıcı\n    rate: number = 15; // Faiz Oranı\n\n    closeResult: string;\n    now = formatDate(new Date(), 'dd/MM/yyyy', 'en'); // Kayıt Tarihi İçin Tutulan Değişken\n\n    constructor(\n        private formBuilder: FormBuilder,\n        public route: ActivatedRoute,\n        private router: Router,\n        private session: SessionService,\n        private transferSErvice: TransferService,\n        private accountService: AccountService,\n        private currencyService: CurrencyConverterService,\n        private modalService: NgbModal\n    ) {\n        if (!session.getToken()) {\n            // Eğer giriş yapan kullanıcı yoksa Login sayfasına yönlendirir.\n            this.router.navigateByUrl('/login');\n        } else {\n            this.getFirst(session.getToken());\n        }\n    }\n\n    async getFirst(username: string) {\n        this.username = this.session.getToken(); // Token'dan kullanıcı ismi alınıp \"username\" değişkenine kaydedilir.\n        await userAccounts(username).then(\n            // Kullanıcının hesapları \"accounts\" değişkenine kaydedilir.\n            (resolve) => (this.accounts = resolve)\n        );\n        await userSendTransfers(username).then(\n            // Kullanıcının gönderdiği transferler \"accountSendTransfers\" değişkenine kaydedilir.\n            (resolve) => (this.sendTransfers = resolve)\n        );\n        await userReceiveTransfers(username).then(\n            // Kullanıcının aldığı transferler \"accountReceiveTransfers\" değişkenine kaydedilir.\n            (resolve) => (this.receiveTransfers = resolve)\n        );\n    }\n\n    ngOnInit() {\n        this.transferForm = this.formBuilder.group({\n            // Form İle İlgili Validasyonları Belirleme\n            cSendAccountNumber: ['', [Validators.required, Validators.min(1)]],\n            cReceiveAccountNumber: [\n                '',\n                [Validators.required, Validators.min(1)],\n            ],\n            amount: ['', [Validators.required, Validators.min(1)]],\n            description: ['', Validators.required],\n        });\n    }\n\n    /** Validasyon için form değerlerine ulaşmayı sağlayan get metodları */\n    get cSendAccountNumber() {\n        return this.transferForm.get('cSendAccountNumber');\n    }\n    get cReceiveAccountNumber() {\n        return this.transferForm.get('cReceiveAccountNumber');\n    }\n    get amount() {\n        return this.transferForm.get('amount');\n    }\n    get description() {\n        return this.transferForm.get('description');\n    }\n\n    open(content: any, transferType: string) {\n        // Transfer Ekleme Modal'ını Açma\n        this.addParamToURL(transferType);\n        this.modalService\n            .open(content, { ariaLabelledBy: 'modal-basic-title' })\n            .result.then((result) => {\n                this.closeResult = `Closed with: ${result}`;\n            });\n    }\n\n    async onSubmit() {\n        // Transfer Ekleme Fonksiyonu\n        this.newTransfer = this.transferForm.value;\n        console.log(this.newTransfer);\n\n        // Eğer form'da herhangi bir validasyon hatası çıkarsa işlem yapılmaz!\n        if (this.transferForm.invalid) {\n            alert('Zorunlu Alanları Doldurun!');\n            return;\n        }\n\n        let customerSendAccount: Account; // Gönderen Kullanıcı Hesap Bilgisi\n        await getAccount(\n            this.username,\n            this.newTransfer.cSendAccountNumber\n        ).then((response) => {\n            console.log(response);\n            customerSendAccount = response[0];\n        });\n        let customerReceiveAccount: Account; // Alan Kullanıcı Hesap Bilgisi\n        if (this.getParamFromURL() === 'Virman') {\n            // Eğer hesap türü \"Virman\" ise alıcı hesabı bilgisi kullanıcın diğer hesaplarından seçilir.\n            console.log('virman');\n            await getAccount(\n                this.username,\n                this.newTransfer.cReceiveAccountNumber\n            ).then((response) => {\n                customerReceiveAccount = response[0];\n            });\n        } else {\n            // Eğer hesap türü \"Havale\" ise alıcı hesabı bilgisi girilen hesap numarası bilgisinde göre alınır.\n            await getAccountAnotherUser(\n                this.username,\n                this.newTransfer.cReceiveAccountNumber\n            )\n                .then((response) => {\n                    if (response.length === 0) {\n                        alert('Alan Kullanıcı Hesabı Bulunamadı!');\n                        return;\n                    } else {\n                        customerReceiveAccount = response[0];\n                    }\n                })\n                .catch((error) => console.log(error));\n        }\n\n        let convertMoney: number;\n        if (customerReceiveAccount !== null) {\n            // Eğer alıcı hesap bilgisi doğru ise;\n            convertMoney = this.currencyService.convertForAddTransfer(\n                // Para dönüşümü yapılır.\n                customerSendAccount.currency,\n                customerReceiveAccount.currency,\n                this.newTransfer.amount\n            );\n            if (this.newTransfer.amount > customerSendAccount.amount) {\n                // Bakiye'nin yeterli olup olmadığı kontrol edilir.\n                alert('Paranın Çekileceği Hesabınızda Yeterli Bakiye Yok!');\n                return;\n            } else {\n                let customerSendKey: number; // Hesap güncelleme işlemi için gönderen kullanıcının hesabının primary key'i alınır.\n                await getAccountKey(customerSendAccount.accountNumber).then(\n                    (response) => {\n                        customerSendKey = response[0];\n                    }\n                );\n                let customerReceiveKey: number; // Hesap güncelleme işlemi için alan kullanıcının hesabının primary key'i alınır.\n                await getAccountKey(customerReceiveAccount.accountNumber).then(\n                    (response) => {\n                        customerReceiveKey = response[0];\n                    }\n                );\n\n                this.accountService.updateAccountByTransfer(\n                    // Hesaplara gerekli parasal güncellemeler yapılır.\n                    customerSendKey,\n                    customerReceiveKey,\n                    customerSendAccount.amount - this.newTransfer.amount,\n                    customerReceiveAccount.amount + convertMoney\n                );\n\n                this.transferSErvice.addTransfer(\n                    // Transfer Eklenir.\n                    this.getParamFromURL(),\n                    this.username,\n                    customerSendAccount.accountName,\n                    customerSendAccount.accountNumber,\n                    customerSendAccount.amount - this.newTransfer.amount,\n                    customerSendAccount.currency,\n                    customerReceiveAccount.customerName,\n                    customerReceiveAccount.accountName,\n                    customerReceiveAccount.accountNumber,\n                    customerReceiveAccount.amount + convertMoney,\n                    -this.newTransfer.amount,\n                    this.newTransfer.description,\n                    this.now\n                );\n            }\n        }\n    }\n\n    addParamToURL(transferType: string) {\n        // Form'da gerekli yerleri değiştirmek için transfer türünü url'e ekleme fonksiyonu\n        this.router.navigate([], {\n            queryParams: {\n                transferType: transferType,\n            },\n            queryParamsHandling: 'merge',\n        });\n    }\n\n    getParamFromURL(): string {\n        // Form'da gerekli yerleri değiştirmek için transfer türünü url'den alma fonksiyonu\n        let transferType: string;\n        this.route.queryParams.subscribe((params) => {\n            transferType = params['transferType'];\n        });\n        return transferType;\n    }\n}\n","<div class=\"main\">\r\n    <div class=\"container-sm\">\r\n        <div class=\"row\">\r\n            <div class=\"col-10\">\r\n                <h2>{{ \"sidebar.transfers\" | translate }}</h2>\r\n                <div\r\n                    *ngIf=\"\r\n                        sendTransfers.length !== 0 ||\r\n                            receiveTransfers.length !== 0;\r\n                        else noTransfer\r\n                    \"\r\n                >\r\n                    <table class=\"table table-bordered\">\r\n                        <thead class=\"thead-dark\">\r\n                            <tr>\r\n                                <th>\r\n                                    {{ \"transfer.sendAccountName\" | translate }}\r\n                                </th>\r\n                                <th>\r\n                                    {{\r\n                                        \"transfer.sendAccountNumber\" | translate\r\n                                    }}\r\n                                </th>\r\n                                <th>\r\n                                    {{\r\n                                        \"transfer.receiveAccountNumber\"\r\n                                            | translate\r\n                                    }}\r\n                                </th>\r\n                                <th>\r\n                                    {{ \"account.currency.title\" | translate }}\r\n                                </th>\r\n                                <th>{{ \"account.amount\" | translate }}</th>\r\n                                <th>\r\n                                    {{ \"transfer.description\" | translate }}\r\n                                </th>\r\n                                <th>{{ \"account.date\" | translate }}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tr *ngFor=\"let transfer of sendTransfers\">\r\n                            <td>{{ transfer.cSendAccountName }}</td>\r\n                            <td>{{ transfer.cSendAccountNumber }}</td>\r\n                            <td>{{ transfer.cReceiveAccountNumber }}</td>\r\n                            <td>{{ transfer.cSendAccountCurrency }}</td>\r\n                            <td>{{ transfer.amount | myCurrency }}</td>\r\n                            <td>{{ transfer.description }}</td>\r\n                            <td>{{ transfer.date }}</td>\r\n                        </tr>\r\n                        <tr *ngFor=\"let transfer of receiveTransfers\">\r\n                            <td>{{ transfer.cSendAccountName }}</td>\r\n                            <td>{{ transfer.cSendAccountNumber }}</td>\r\n                            <td>{{ transfer.cReceiveAccountNumber }}</td>\r\n                            <td>{{ transfer.cSendAccountCurrency }}</td>\r\n                            <td>\r\n                                {{\r\n                                    transfer.amount | absoluteValue | myCurrency\r\n                                }}\r\n                            </td>\r\n                            <td>{{ transfer.description }}</td>\r\n                            <td>{{ transfer.date }}</td>\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                <ng-template #noTransfer>\r\n                    <h4>\r\n                        {{ \"transfer.noTransfers\" | translate }}\r\n                    </h4>\r\n                </ng-template>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <button\r\n                    class=\"btn btn-lg btn-primary\"\r\n                    (click)=\"open(addTransfer, 'Virman')\"\r\n                >\r\n                    {{ \"transfer.modal.virman\" | translate }}\r\n                </button>\r\n                <hr />\r\n                <button\r\n                    class=\"btn btn-lg btn-primary\"\r\n                    (click)=\"open(addTransfer, 'Havale')\"\r\n                >\r\n                    {{ \"transfer.modal.havale\" | translate }}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #addTransfer let-modal>\r\n        <div class=\"modal-header\">\r\n            <h4 class=\"modal-title\" id=\"modal-basic-title\">\r\n                {{ getParamFromURL() | translate }}\r\n            </h4>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <form [formGroup]=\"transferForm\" (ngSubmit)=\"onSubmit()\">\r\n                <label for=\"cSendAccountNumber\">\r\n                    {{ \"transfer.sendAccountNumber\" | translate }} *\r\n                </label>\r\n                <select\r\n                    class=\"custom-select custom-select-lg mb-3\"\r\n                    formControlName=\"cSendAccountNumber\"\r\n                >\r\n                    <option\r\n                        *ngFor=\"let account of accounts\"\r\n                        value=\"{{ account.accountNumber }}\"\r\n                    >\r\n                        {{ \"account.accountNumber\" | translate }}\r\n                        {{ account.accountNumber }},\r\n                        {{ \"account.accountNumber\" | translate }}\r\n                        {{ account.amount }},\r\n                        {{ \"account.currency.title\" | translate }}\r\n                        {{ account.currency }}\r\n                    </option>\r\n                </select>\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    *ngIf=\"\r\n                        cSendAccountNumber.errors &&\r\n                        (cSendAccountNumber.dirty || cSendAccountNumber.touched)\r\n                    \"\r\n                >\r\n                    <p *ngIf=\"cSendAccountNumber.errors.required\">\r\n                        {{ \"transfer.modal.errors.sendRequired\" | translate }}\r\n                    </p>\r\n                </div>\r\n                <div class=\"alert alert-info\">\r\n                    {{ \"account.modal.errors.currencyConvertion\" | translate }}\r\n                </div>\r\n                <label for=\"cReceiveAccountNumber\">\r\n                    {{ \"transfer.receiveAccountNumber\" | translate }} *\r\n                </label>\r\n                <div *ngIf=\"getParamFromURL() === 'Virman'; else havaleBlock\">\r\n                    <select\r\n                        class=\"custom-select custom-select-lg mb-3\"\r\n                        formControlName=\"cReceiveAccountNumber\"\r\n                    >\r\n                        <option\r\n                            *ngFor=\"let account of accounts\"\r\n                            value=\"{{ account.accountNumber }}\"\r\n                        >\r\n                            {{ \"account.accountNumber\" | translate }}\r\n                            {{ account.accountNumber }},\r\n                            {{ \"account.accountNumber\" | translate }}\r\n                            {{ account.amount }},\r\n                            {{ \"account.currency.title\" | translate }}\r\n                            {{ account.currency }}\r\n                        </option>\r\n                    </select>\r\n                </div>\r\n                <ng-template #havaleBlock>\r\n                    <input\r\n                        type=\"number\"\r\n                        formControlName=\"cReceiveAccountNumber\"\r\n                        class=\"form-control\"\r\n                        required\r\n                    />\r\n                    <div\r\n                        class=\"alert alert-danger\"\r\n                        *ngIf=\"\r\n                            cReceiveAccountNumber.errors &&\r\n                            (cReceiveAccountNumber.dirty ||\r\n                                cReceiveAccountNumber.touched)\r\n                        \"\r\n                    >\r\n                        <p *ngIf=\"cReceiveAccountNumber.errors.required\">\r\n                            {{\r\n                                \"transfer.modal.errors.receiveRequired\"\r\n                                    | translate\r\n                            }}\r\n                        </p>\r\n                        <p *ngIf=\"cReceiveAccountNumber.errors.min\">\r\n                            {{ \"transfer.modal.errors.numberMin\" | translate }}\r\n                        </p>\r\n                    </div></ng-template\r\n                >\r\n                <label for=\"amount\">{{ \"account.amount\" | translate }} *</label>\r\n                <input\r\n                    type=\"number\"\r\n                    formControlName=\"amount\"\r\n                    class=\"form-control\"\r\n                    min=\"1\"\r\n                />\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    *ngIf=\"amount.errors && (amount.dirty || amount.touched)\"\r\n                >\r\n                    <p *ngIf=\"amount.errors.required\">\r\n                        {{ \"account.modal.errors.amountRequired\" | translate }}\r\n                    </p>\r\n                    <p *ngIf=\"amount.errors.min\">\r\n                        {{ \"account.modal.errors.amountMin\" | translate }}\r\n                    </p>\r\n                </div>\r\n                <label for=\"description\">\r\n                    {{ \"transfer.description\" | translate }} *\r\n                </label>\r\n                <input\r\n                    type=\"text\"\r\n                    formControlName=\"description\"\r\n                    class=\"form-control\"\r\n                />\r\n                <div\r\n                    class=\"alert alert-danger\"\r\n                    *ngIf=\"\r\n                        description.errors &&\r\n                        (description.dirty || description.touched)\r\n                    \"\r\n                >\r\n                    <p *ngIf=\"description.errors.required\">\r\n                        {{\r\n                            \"transfer.modal.errors.descriptionRequired\"\r\n                                | translate\r\n                        }}\r\n                    </p>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <button class=\"btn btn-primary btn-lg btn-block\">\r\n                        {{ \"transfer.modal.add\" | translate }}\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </ng-template>\r\n</div>\r\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'absoluteValue',\n})\nexport class AbsoluteValuePipe implements PipeTransform {\n    // Negatif değerleri pozitif değerlere dönüştürme işlemi\n    transform(value: any, args?: any): any {\n        return value < 0 ? Math.abs(value) : value;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'myCurrency',\n})\nexport class MyCurrencyPipe implements PipeTransform {\n    // Nokta'dan sonra 2 basamak gösterme işlemi\n    transform(value: any): any {\n        let result: number = Math.round(value * 100) / 100;\n        return result;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { database } from '../DexieService/BankApplicationDB';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AccountService {\n    constructor() {}\n    ngOnInit() {}\n\n    addAccount(\n        // Hesap Ekleme Fonksiyonu\n        customerName: string,\n        accountName: string,\n        accountNumber: number,\n        amount: number,\n        currency: string,\n        rate: number,\n        date: string\n    ) {\n        database.accounts\n            .put({\n                customerName: customerName,\n                accountName: accountName,\n                accountNumber: accountNumber,\n                amount: amount,\n                currency: currency,\n                rate: rate,\n                date: date,\n            })\n            .then(() => {\n                alert('Hesap Başarıyla Eklendi.');\n                window.location.reload();\n            })\n            .catch((error) => {\n                alert('Hata Oluştu: ' + error);\n            });\n    }\n\n    updateAccount(accountID: number, amount: number) {\n        // Hesap Güncelleme Fonksiyonu\n        database.accounts\n            .update(accountID, {\n                amount: amount,\n            })\n            .then((response) => {\n                console.log('Güncellendi', '-', response);\n            })\n            .catch((error) => {\n                alert('Hata Oluştu: ' + error);\n            });\n    }\n    updateAccountByTransfer(\n        // Transfer Eklerken Hesap Güncelleme Fonksiyonu\n        sendId: number,\n        receiveId: number,\n        amountSend: number,\n        amountReceive: number\n    ) {\n        database.accounts\n            .update(sendId, {\n                amount: amountSend,\n            })\n            .then((response) => {\n                database.accounts\n                    .update(receiveId, {\n                        amount: amountReceive,\n                    })\n                    .then((response) => {\n                        console.log('Güncellendi, Alıcı', '-', response);\n                    })\n                    .catch((err) => console.log('Alan Kullanıcı Hatası', err));\n\n                console.log('Güncellendi, Gönderen', '-', response);\n            })\n            .catch((error) => {\n                alert('Gönderen Kullanıcı Hatası: ' + error);\n            });\n    }\n    deleteAccount(accountID: number) {\n        // Hesap Silme Fonksiyonu\n        database.accounts\n            .delete(accountID)\n            .then(() => {\n                alert('Hesap Başarıyla Silindi.');\n                window.location.reload();\n            })\n            .catch((error) => {\n                alert('Hata Oluştu: ' + error);\n            });\n    }\n}\n\nexport async function getAccountName(accountNumber: number) {\n    // Hesap Adı Getirme Fonksiyonu\n    return await database.accounts\n        .where('accountNumber')\n        .equals(accountNumber)\n        .toArray();\n}\nexport async function userAccounts(username: string) {\n    // Kullanıcının Hesaplarını Getirme Fonksiyonu\n    return await database.accounts\n        .where('customerName')\n        .equalsIgnoreCase(username)\n        .reverse()\n        .toArray();\n}\nexport async function userAnotherAccounts(username: string) {\n    // Diğer Kullanıcıların Hesaplarını Getirme Fonksiyonu\n    return await database.accounts\n        .where('customerName')\n        .notEqual(username)\n        .reverse()\n        .toArray();\n}\nexport async function numberOfAccounts(username: string) {\n    // Kullanıcını Hesap Sayısını Bulma Fonksiyonu\n    return await database.accounts\n        .where('customerName')\n        .equalsIgnoreCase(username)\n        .count();\n}\nexport async function getAccountKey(accountNumber: number) {\n    // Hesabın Primary Key'ini Getirme Fonksiyonu\n    return await database.accounts\n        .where('accountNumber')\n        .equals(accountNumber)\n        .primaryKeys();\n}\nexport async function getAccount(username: string, accountNumber: number) {\n    // Hesap Detayını Getirme Fonksiyonu\n    return await database.accounts\n        .where({ customerName: username })\n        .and((account) => account.accountNumber == accountNumber)\n        .toArray();\n}\nexport async function getAccountAnotherUser(\n    username: string,\n    accountNumber: number\n) {\n    // Diğer Kullanıcının Hesap Detayını Getirme Fonksiyonu\n    return await database.accounts\n        .where({ accountNumber: accountNumber })\n        .and((account) => account.customerName != username)\n        .toArray();\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CurrencyConverterService {\n    currencies = { $: 6, '€': 7, Altın: 390, TL: 1 }; // Her Bir Para Biriminin TL Karşılığı\n\n    constructor() {}\n\n    convertForAddAccount(\n        // Para Miktarını Girilen Birimlere Göre Çevirme İşlemi\n        oldAccountCurrency: string,\n        newAccountCurrency: string,\n        newAccountAmount: number\n    ): number {\n        let rate: number =\n            this.currencies[newAccountCurrency] /\n            this.currencies[oldAccountCurrency];\n        let convertedMoney: number = newAccountAmount * rate;\n        return convertedMoney;\n    }\n    convertForAddTransfer(\n        // Para Miktarını Girilen Birimlere Göre Çevirme İşlemi\n        oldAccountCurrency: string,\n        newAccountCurrency: string,\n        newAccountAmount: number\n    ): number {\n        let rate: number =\n            this.currencies[newAccountCurrency] /\n            this.currencies[oldAccountCurrency];\n        let convertedMoney: number = newAccountAmount / rate;\n        return convertedMoney;\n    }\n}\n","import { Transfer } from '../../models/Transfer';\nimport { Account } from '../../models/Account';\nimport { Customer } from '../../models/Customer';\nimport Dexie from 'dexie';\n\nexport class BankApplicationDB extends Dexie {\n    public customers: Dexie.Table<Customer, number>;\n    public accounts: Dexie.Table<Account, number>;\n    public transfers: Dexie.Table<Transfer, number>;\n\n    constructor() {\n        super('BankApplicationDB');\n        const db = this;\n\n        // Tabloları Tanımlama\n        db.version(1).stores({\n            customers: '++id,[&username+password]',\n            accounts:\n                '++id,customerName,accountName,&accountNumber,amount,currency,rate,date',\n            transfers:\n                '++id,transferType,cSendName,cSendAccountName,cSendAccountNumber,cSendAccountAmount,cSendAccountCurrency,cReceiveName,cReceiveAccountName,cReceiveAccountNumber,cReceiveAccountAmount,amount,description,date',\n        });\n\n        // Tabloları halihazırdaki model'lere eşitleme\n        db.customers.mapToClass(Customer);\n        db.accounts.mapToClass(Account);\n        db.transfers.mapToClass(Transfer);\n    }\n}\n\nexport var database = new BankApplicationDB();\n","import { Router } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { database } from '../DexieService/BankApplicationDB';\n\nexport const TOKEN_NAME: string = 'token';\n@Injectable({\n    providedIn: 'root',\n})\nexport class SessionService {\n    constructor(private router: Router) {}\n    ngOnInit() {}\n\n    getToken(): string {\n        // Giriş yapan kullanıcının tokenını local storage'dan çekme işlemi\n        return localStorage.getItem(TOKEN_NAME);\n    }\n    setToken(token: string): void {\n        // Giriş yapan kullanıcının tokenını local storage'a kaydetme işlemi\n        // ! Backend olmadığından gerçek bir token yerine kullanıcı adını local storage'a ekliyorum.\n        localStorage.setItem(TOKEN_NAME, token);\n    }\n\n    register(username: string, password: string) {\n        // Kayıt Olma Fonksiyonu\n        database.customers\n            .put({ username: username, password: password })\n            .then(() => {\n                alert('Kayıt Başarılı');\n                // Eğer veritabanında böyle bir kullanıcı yoksa yeni kullanıcıyı eklenir ve login sayfasına yönlendirilir.\n                this.router.navigateByUrl('/login');\n            })\n            .catch((error) => {\n                alert(\n                    'Bu İsim Kullanılmakta! Başka Bir Kullanıcı Adı Deneyiniz!'\n                );\n            });\n    }\n\n    login(username: string, password: string) {\n        // Giriş Yapma Fonksiyonu\n        database.customers\n            .where({ username: username, password: password })\n            .toArray()\n            .then((list) => {\n                if (list.length === 0) {\n                    // Eğer bu bilgilere sahip bir kayıtlı kullanıcı yoksa,\n                    alert('Hatalı Ya Da Eksik Bilgi Girdiniz!');\n                } else {\n                    // Eğer bu bilgilere sahip bir kayıtlı kullanıcı varsa,\n                    list.forEach((item) => {\n                        if (item) {\n                            alert('Giriş Başarılı');\n                            this.setToken(item.username); // Eğer giriş başarılı ise token local storage'a kaydedilir.\n                            this.router.navigateByUrl('/'); // Ardından Ana Sayfaya yönlendiriyorum.\n                        }\n                    });\n                }\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    }\n\n    logOut() {\n        // Oturumdan Çıkış Fonksiyonu\n        localStorage.clear(); // Local Storage'dan token temizlenir.\n        window.location.reload(); // Sayfa yenilenerek otomatikman login sayfasına yönlendirilir.\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { database } from '../DexieService/BankApplicationDB';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TransferService {\n    constructor() {}\n\n    addTransfer(\n        // Transfer Ekleme Fonksiyonu\n        transferType: string,\n        cSendName: string,\n        cSendAccountName: string,\n        cSendAccountNumber: number,\n        cSendAccountAmount: number,\n        cSendAccountCurrency: string,\n        cReceiveName: string,\n        cReceiveAccountName: string,\n        cReceiveAccountNumber: number,\n        cReceiveAccountAmount: number,\n        amount: number,\n        description: string,\n        date: string\n    ) {\n        database.transfers\n            .put({\n                transferType: transferType,\n                cSendName: cSendName,\n                cSendAccountName: cSendAccountName,\n                cSendAccountNumber: cSendAccountNumber,\n                cSendAccountAmount: cSendAccountAmount,\n                cSendAccountCurrency: cSendAccountCurrency,\n                cReceiveName: cReceiveName,\n                cReceiveAccountName: cReceiveAccountName,\n                cReceiveAccountNumber: cReceiveAccountNumber,\n                cReceiveAccountAmount: cReceiveAccountAmount,\n                amount: amount,\n                description: description,\n                date: date,\n            })\n            .then(() => {\n                alert('Transfer Başarıyla Eklendi.');\n                window.location.reload();\n            })\n            .catch((error) => {\n                alert('Hata Oluştu: ' + error);\n            });\n    }\n}\n\nexport async function userSendTransfers(username: string) {\n    // Kullanıcının Gönderdiği Transferleri Getirme Fonksiyonu\n    return await database.transfers\n        .where('cSendName')\n        .equalsIgnoreCase(username)\n        .reverse()\n        .toArray();\n}\nexport async function userReceiveTransfers(username: string) {\n    // Kullanıcının Aldığı Transferleri Getirme Fonksiyonu\n    return await database.transfers\n        .where('cReceiveName')\n        .equalsIgnoreCase(username)\n        .and((transfer) => transfer.cSendName !== username)\n        .reverse()\n        .toArray();\n}\nexport async function userTransfersLimitTen(username: string) {\n    // Kullanıcının Son 10 Hesap Hareketlerini Getirme Fonksiyonu\n    return await database.transfers\n        .where('cSendName')\n        .equalsIgnoreCase(username)\n        .reverse()\n        .limit(10)\n        .toArray();\n}\nexport async function userAccountSendTransfers(\n    username: string,\n    accountNumber: number\n) {\n    // Kullanıcının Tek Bir Hesabına Ait Gönderdiği Transfer Bilgilerini Getirme Fonksiyonu\n    return await database.transfers\n        .where({ cSendName: username })\n        .and((transfer) => transfer.cSendAccountNumber == accountNumber)\n        .reverse()\n        .toArray();\n}\nexport async function userAccountReceiveTransfers(\n    username: string,\n    accountNumber: number\n) {\n    // Kullanıcının Tek Bir Hesabına Ait Aldığı Transfer Bilgilerini Getirme Fonksiyonu\n    return await database.transfers\n        .where({ cReceiveName: username })\n        .and((transfer) => transfer.cReceiveAccountNumber == accountNumber)\n        .reverse()\n        .toArray();\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch((err) => console.error(err));\n"],"sourceRoot":"webpack:///"}